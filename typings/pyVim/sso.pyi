"""
This type stub file was generated by pyright.
"""

import six.moves.http_client
from six import PY3
from pyVmomi import _legacyThumbprintException

__author__ = ...
if PY3:
    ...
else:
    ...
if _legacyThumbprintException:
    ...
UTF_8 = ...
SHA256 = ...
SHA512 = ...
default_parser = ...

def format_time(time): ...

class SoapException(Exception):
    """
    Exception raised in case of STS request failure.
    """

    def __init__(self, soap_msg, fault_code, fault_string) -> None:
        """
        Initializer for SoapException.

        @type      soap_msg: C{str}
        @param     soap_msg: the soap fault XML returned by STS
        @type    fault_code: C{str}
        @param   fault_code: The fault code returned by STS.
        @type  fault_string: C{str}
        @param fault_string: The fault string returned by STS.
        """
        ...

    def __str__(self) -> str:
        """
        Returns the string representation of SoapException.

        @rtype: C{str}
        @return: string representation of SoapException
        """
        ...

class SSOHTTPConnection(six.moves.http_client.HTTPConnection):
    """
    A class that establishes HTTP Connection.
    Only intened to be used for calls routing through
    a local sidecar proxy (localhost:1080).
    """

    def __init__(self, *args, **kwargs) -> None:
        """
        Initializer.  See httplib.HTTPConnection for other arguments
        """
        ...

class SSOHTTPSConnection(six.moves.http_client.HTTPSConnection):
    """
    An HTTPS class that verifies server's certificate on connect.
    """

    def __init__(self, *args, **kwargs) -> None:
        """
        Initializer.  See httplib.HTTPSConnection for other arguments
        than thumbprint and server_cert.

        At least one of thumbprint, server_cert should be provided,
        otherwise server certificate is not validated.

        @type           thumbprint: C(str)
        @param          thumbprint: Expected SHA-1 thumbprint of the server
                                    certificate.  May be None.

        @type          server_cert: C(str)
        @param         server_cert: File with expected server certificate.
                                    May be None.
        """
        ...

    def connect(self):  # -> None:
        """
        Connect method: connects to the remote system, and upon
        successful connection validates certificate.

        Throws an exception when something is wrong.  See
        httplib.HTTPSConnection.connect() for details.
        """
        ...

def is_sidecar_request(scheme, host):  # -> Literal[True] | None:
    """
    Check if the request is through
    local sidecar (localhost:1080)
    """
    ...

class SsoAuthenticator:
    """
    A class to handle the transport layer communication between the client and
    the STS service.
    """

    def __init__(self, sts_url, sts_cert=..., thumbprint=...) -> None:
        """
        Initializer for SsoAuthenticator.

        @type           sts_url: C{str}
        @param          sts_url: URL for the Security Token Service. Usually
                                 obtained by querying Component Manager.
        @type          sts_cert: C{str}
        @param         sts_cert: The file with public key of the Security
                                 Token Service.  Usually obtained from
                                 Component Manager and written to the file.
        @type        thumbprint: C{str}
        @param       thumbprint: The SHA-1 thumbprint of the certificate used
                                 by the Security Token Service.  It is same
                                 thumbprint you can pass to pyVmomi SoapAdapter.
        """
        ...

    def perform_request(
        self, soap_message, public_key=..., private_key=..., ssl_context=...
    ):  # -> bytes:
        """
        Performs a Holder-of-Key SAML token request using the service user's
        certificates or a bearer token request using the user credentials.

        @type      soap_message: C{str}
        @param     soap_message: Authentication SOAP request.
        @type        public_key: C{str}
        @param       public_key: File containing the public key for the service
                                 user registered with SSO, in PEM format.
        @type       private_key: C{str}
        @param      private_key: File containing the private key for the service
                                 user registered with SSO, in PEM format.
        @type       ssl_context: C{ssl.SSLContext}
        @param      ssl_context: SSL context describing the various SSL options.
                                 It is only supported in Python 2.7.9 or higher.
        @rtype: C{str}
        @return: Response received from the STS after the HoK request.
        """
        ...

    def get_bearer_saml_assertion(
        self,
        username,
        password,
        public_key=...,
        private_key=...,
        request_duration=...,
        token_duration=...,
        delegatable=...,
        renewable=...,
        ssl_context=...,
    ):
        """
        Extracts the assertion from the Bearer Token received from the Security
        Token Service.

        @type          username: C{str}
        @param         username: Username for the user for which bearer token
                                 needs to be requested.
        @type          password: C{str}
        @param         password: Password for the user for which bearer token
                                 needs to be requested.
        @type        public_key: C{str}
        @param       public_key: File containing the public key for the service
                                 user registered with SSO, in PEM format.
        @type       private_key: C{str}
        @param      private_key: File containing the private key for the service
                                 user registered with SSO, in PEM format.

        @type  request_duration: C{long}
        @param request_duration: The duration for which the request is valid. If
                                 the STS receives this request after this
                                 duration, it is assumed to have expired. The
                                 duration is in seconds and the default is 60s.
        @type    token_duration: C{long}
        @param   token_duration: The duration for which the SAML token is issued
                                 for. The duration is specified in seconds and
                                 the default is 600s.
        @type       delegatable: C{boolean}
        @param      delegatable: Whether the generated token is delegatable or not
                                 The default value is False
        @type       ssl_context: C{ssl.SSLContext}
        @param      ssl_context: SSL context describing the various SSL options.
                                 It is only supported in Python 2.7.9 or higher.
        @rtype: C{str}
        @return: The SAML assertion in Unicode.
        """
        ...

    def get_bearer_saml_assertion_gss_api(
        self, request_duration=..., token_duration=..., delegatable=..., renewable=...
    ):
        """
        Extracts the assertion from the Bearer Token received from the Security
        Token Service using the GSS API.

        @type  request_duration: C{long}
        @param request_duration: The duration for which the request is valid. If
                                 the STS receives this request after this
                                 duration, it is assumed to have expired. The
                                 duration is in seconds and the default is 60s.
        @type    token_duration: C{long}
        @param   token_duration: The duration for which the SAML token is issued
                                 for. The duration is specified in seconds and
                                 the default is 600s.
        @type       delegatable: C{boolean}
        @param      delegatable: Whether the generated token is delegatable or not
                                 The default value is False
        @type         renewable: C{boolean}
        @param        renewable: Whether the generated token is renewable or not
                                 The default value is False
        @rtype: C{str}
        @return: The SAML assertion.
        """
        ...

    def get_hok_saml_assertion(
        self,
        public_key,
        private_key,
        request_duration=...,
        token_duration=...,
        act_as_token=...,
        delegatable=...,
        renewable=...,
        ssl_context=...,
    ):
        """
        Extracts the assertion from the response received from the Security
        Token Service.

        @type        public_key: C{str}
        @param       public_key: File containing the public key for the service
                                 user registered with SSO, in PEM format.
        @type       private_key: C{str}
        @param      private_key: File containing the private key for the service
                                 user registered with SSO, in PEM format.
        @type  request_duration: C{long}
        @param request_duration: The duration for which the request is valid. If
                                 the STS receives this request after this
                                 duration, it is assumed to have expired. The
                                 duration is in seconds and the default is 60s.
        @type    token_duration: C{long}
        @param   token_duration: The duration for which the SAML token is issued
                                 for. The duration is specified in seconds and
                                 the default is 600s.
        @type      act_as_token: C{str}
        @param     act_as_token: Bearer/Hok token which is delegatable
        @type       delegatable: C{boolean}
        @param      delegatable: Whether the generated token is delegatable or not
        @type         renewable: C{boolean}
        @param        renewable: Whether the generated token is renewable or not
                                 The default value is False
        @type       ssl_context: C{ssl.SSLContext}
        @param      ssl_context: SSL context describing the various SSL options.
                                 It is only supported in Python 2.7.9 or higher.
        @rtype: C{str}
        @return: The SAML assertion in Unicode.
        """
        ...

    def get_token_by_token(
        self,
        hok_token,
        private_key,
        request_duration=...,
        token_duration=...,
        delegatable=...,
        renewable=...,
        ssl_context=...,
    ):
        """
        Get Hok token by Hok token.

        @type       hok_token:   C{str}
        @param      hok_token:   Hok token to be used to get another token
        @type       private_key: C{str}
        @param      private_key: File containing the private key for the service
                                 user registered with SSO, in PEM format.
        @type  request_duration: C{long}
        @param request_duration: The duration for which the request is valid. If
                                 the STS receives this request after this
                                 duration, it is assumed to have expired. The
                                 duration is in seconds and the default is 60s.
        @type    token_duration: C{long}
        @param   token_duration: The duration for which the SAML token is issued
                                 for. The duration is specified in seconds and
                                 the default is 600s.
        @type    delegatable: C{boolean}
        @param   delegatable: Whether the generated token is delegatable or not.
                              The default value is False.
        @type         renewable: C{boolean}
        @param        renewable: Whether the generated token is renewable or not
                                 The default value is False
        @type       ssl_context: C{ssl.SSLContext}
        @param      ssl_context: SSL context describing the various SSL options.
                                 It is only supported in Python 2.7.9 or higher.
        @rtype: C{str}
        @return: The Hok SAML assertion in Unicode.
        """
        ...

class SecurityTokenRequest:
    """
    SecurityTokenRequest class handles the serialization of request to the STS
    for a SAML token.
    """

    def __init__(
        self,
        username=...,
        password=...,
        public_key=...,
        private_key=...,
        request_duration=...,
        token_duration=...,
        gss_binary_token=...,
        hok_token=...,
    ) -> None:
        """
        Initializer for the SecurityToken Request class.

        @type          username: C{str}
        @param         username: Username for the user for which bearer token
                                 needs to be requested.
        @type          password: C{str}
        @param         password: Password for the user for which bearer token
                                 needs to be requested.
        @type        public_key: C{str}
        @param       public_key: The file containing the public key of the
                                 service account requesting the SAML token.
        @type       private_key: C{str}
        @param      private_key: The file containing the private key of the
                                 service account requesting the SAML token.
        @type  request_duration: C{long}
        @param request_duration: The duration for which the request is valid. If
                                 the STS receives this request after this
                                 duration, it is assumed to have expired. The
                                 duration is specified in seconds and default is
                                 60s.
        @type    token_duration: C{long}
        @param   token_duraiton: The duration for which the SAML token is issued
                                 for. The duration is specified in seconds and
                                 the default is 600s.
        """
        ...

    def construct_bearer_token_request(self, delegatable=..., renewable=...):  # -> str:
        """
        Constructs the actual Bearer token SOAP request.

        @type  delegatable: C{boolean}
        @param delegatable: Whether the generated token is delegatable or not
        @type    renewable: C{boolean}
        @param   renewable: Whether the generated token is renewable or not
                            The default value is False
        @rtype:  C{str}
        @return: Bearer token SOAP request.
        """
        ...

    def construct_bearer_token_request_with_binary_token(
        self, delegatable=..., renewable=...
    ):  # -> str:
        """
        Constructs the actual Bearer token SOAP request using the binary exchange GSS/SSPI token.

        @type  delegatable: C{boolean}
        @param delegatable: Whether the generated token is delegatable or not
        @type    renewable: C{boolean}
        @param   renewable: Whether the generated token is renewable or not
                            The default value is False
        @rtype:  C{str}
        @return: Bearer token SOAP request.
        """
        ...

    def construct_hok_request(self, delegatable=..., act_as_token=..., renewable=...):
        """
        Constructs the actual HoK token SOAP request.

        @type   delegatable: C{boolean}
        @param  delegatable: Whether the generated token is delegatable or not
        @type  act_as_token: C{str}
        @param act_as_token: Bearer/Hok token which is delegatable
        @type    renewable: C{boolean}
        @param   renewable: Whether the generated token is renewable or not
                            The default value is False
        @rtype: C{str}
        @return: HoK token SOAP request in Unicode.
        """
        ...

    def construct_hok_by_hok_request(self, delegatable=..., renewable=...):  # -> str:
        """
        @type    delegatable: C{boolean}
        @param   delegatable: Whether the generated token is delegatable or not
                            The default value is False
        @type    renewable: C{boolean}
        @param   renewable: Whether the generated token is renewable or not
                            The default value is False
        @rtype: C{str}
        @return: HoK token SOAP request in Unicode.
        """
        ...

    def sign_request(self):  # -> None:
        """
        Calculates the signature to the header of the SOAP request which can be
        used by the STS to verify that the SOAP message originated from a
        trusted service.
        """
        ...

    def embed_signature(self):  # -> None:
        """
        Embeds the signature in to the header of the SOAP request.
        """
        ...

def add_saml_context(
    serialized_request, saml_token, private_key_file, request_duration=...
):
    """
    A helper method provided to sign the outgoing LoginByToken requests with the
    HoK token.

    @type       serialized_request: C{str}
    @param      serialized_request: SOAP request which needs to be signed.
    @type               saml_token: C{str}
    @param              saml_token: SAML assertion that will be added to the SOAP
                                    request.
    @type         private_key_file: C{str}
    @param        private_key_file: Private key of the service user that will be
                                    used to sign the request, in PEM format.
    @type         request_duration: C{long}
    @param request_duration: The duration for which the request is valid. If
                                 the STS receives this request after this
                                 duration, it is assumed to have expired. The
                                 duration is in seconds and the default is 60s.
    @rtype: C{str}
    @return: signed SOAP request in Unicode.
    """
    ...

TIME_FORMAT = ...
SIGNED_INFO_TEMPLATE = ...
REQUEST_SIGNATURE_TEMPLATE = ...
SIGNATURE_TEMPLATE = ...
REQUEST_TEMPLATE = ...
REQUEST_TEMPLATE_TOKEN_BY_TOKEN = ...
GSS_REQUEST_TEMPLATE = ...
BINARY_SECURITY_TOKEN_TEMPLATE = ...
USERNAME_TOKEN_TEMPLATE = ...
USE_KEY_TEMPLATE = ...
TIMESTAMP_TEMPLATE = ...
BINARY_EXCHANGE_TEMPLATE = ...
ACTAS_REQUEST_TEMPLATE = ...
