"""
This type stub file was generated by pyright.
"""

from pyVmomi import SessionOrientedStub

"""
Connect to a VMOMI ServiceInstance.

Detailed description (for [e]pydoc goes here).
"""
TOKEN_TYPE_OAUTH_BEARER = ...
TOKEN_TYPE_SAML = ...
TOKEN_TYPE_SSPI = ...
TOKEN_TYPES = ...
_rx = ...
_si = ...

def getSslContext(host, sslContext, disableSslCertValidation):  # -> SSLContext:
    """
    Connections to 'localhost' do not need SSL verification as a certificate
    will never match. The OS provides security by only allowing root to bind
    to low-numbered ports.
    """
    ...

class closing:
    """
    Helper class for using closable objects in a 'with' statement,
    similar to the one provided by contextlib.
    """

    def __init__(self, obj) -> None: ...
    def __enter__(self):  # -> Any:
        ...

    def __exit__(self, *exc_info):  # -> None:
        ...

class VimSessionOrientedStub(SessionOrientedStub):
    """A vim-specific SessionOrientedStub.  See the SessionOrientedStub class
    in pyVmomi/SoapAdapter.py for more information.
    """

    SESSION_EXCEPTIONS = ...
    @staticmethod
    def makeUserLoginMethod(username, password, locale=...):  # -> Callable[..., None]:
        """Return a function that will call the vim.SessionManager.Login() method
        with the given parameters.  The result of this function can be passed as
        the "loginMethod" to a SessionOrientedStub constructor.
        """
        ...

    @staticmethod
    def makeExtensionLoginMethod(extensionKey):  # -> Callable[..., None]:
        """Return a function that will call the vim.SessionManager.Login() method
        with the given parameters.  The result of this function can be passed as
        the "loginMethod" to a SessionOrientedStub constructor.
        """
        ...

    @staticmethod
    def makeCertHokTokenLoginMethod(
        stsUrl, stsCert=..., ssl_context=...
    ):  # -> Callable[..., None]:
        """Return a function that will call the vim.SessionManager.LoginByToken()
        after obtaining a HoK SAML token from the STS. The result of this function
        can be passed as the "loginMethod" to a SessionOrientedStub constructor.

        @param stsUrl: URL of the SAML Token issuing service. (i.e. SSO server).
        @param stsCert: public key of the STS service.
        @param ssl_context: SSL context
        """
        ...

    @staticmethod
    def makeCredBearerTokenLoginMethod(
        username, password, stsUrl, stsCert=..., ssl_context=...
    ):  # -> Callable[..., None]:
        """Return a function that will call the vim.SessionManager.LoginByToken()
        after obtaining a Bearer token from the STS. The result of this function
        can be passed as the "loginMethod" to a SessionOrientedStub constructor.

        @param username: username of the user/service registered with STS.
        @param password: password of the user/service registered with STS.
        @param stsUrl: URL of the SAML Token issueing service. (i.e. SSO server).
        @param stsCert: public key of the STS service.
        @param ssl_context: SSL context
        """
        ...

def Connect(
    host=...,
    port=...,
    user=...,
    pwd=...,
    service=...,
    adapter=...,
    namespace=...,
    path=...,
    version=...,
    keyFile=...,
    certFile=...,
    httpProxyHost=...,
    httpProxyPort=...,
    thumbprint=...,
    sslContext=...,
    httpConnectionTimeout=...,
    connectionPoolTimeout=...,
    token=...,
    tokenType=...,
    disableSslCertValidation=...,
    customHeaders=...,
    b64token=...,
    mechanism=...,
):  # -> ServiceInstance:
    """
    Connect to the specified server, login and return the service
    instance object.

    Throws any exception back to caller. The service instance object is
    also saved in the library for easy access.

    Clients should modify the service parameter only when connecting to
    a VMOMI server other than hostd/vpxd. For both of the latter, the
    default value is fine.

    @param host: Which host to connect to.
    @type  host: string
    @param port: Port
    @type  port: int
    @param user: User
    @type  user: string
    @param pwd: Password
    @type  pwd: string
    @param service: Service
    @type  service: string
    @param adapter: Adapter
    @type  adapter: string
    @param namespace: Namespace *** Deprecated: Use version instead ***
    @type  namespace: string
    @param path: Path
    @type  path: string
    @param version: Version
    @type  version: string
    @param keyFile: ssl key file path
    @type  keyFile: string
    @param certFile: ssl cert file path
    @type  certFile: string
    @param httpProxyHost The host name of the proxy server.
    @type  httpProxyHost: string
    @param httpProxyPort The proxy server port.
    @type  httpProxyPort: int
    @param thumbprint: host cert thumbprint
    @type  thumbprint: string
    @param sslContext: SSL Context describing the various SSL options. It is only
                        supported in Python 2.7.9 or higher.
    @type  sslContext: SSL.Context
    @param httpConnectionTimeout: Timeout in secs for http requests.
    @type  httpConnectionTimeout: int
    @param connectionPoolTimeout: Timeout in secs for idle connections to close, specify
                                    negative numbers for never closing the connections
    @type  connectionPoolTimeout: int
    @type  token: string
    @param token: Authentication and Authorization token to use for the connection.
                    The presence of this token overrides the user and pwd parameters.
    @type  tokenType: string
    @param tokenType: Select which type of Authentication and Authorization token to use.
    @type  disableSslCertValidation: bool
    @param disableSslCertValidation: Creates an unverified SSL context when True.
    @type  customHeaders: dict
    @param customHeaders: Dictionary with custom HTTP headers.
    @param b64token: base64 encoded token
           *** Deprecated: Use token instead ***
    @type  b64token: string
    @param mechanism: authentication mechanism: userpass or sspi
           *** Deprecated: Use tokenType instead ***
    @type  mechanism: string
    """
    ...

def Disconnect(si=...):  # -> None:
    """
    Logout and disconnect the service instance
    @param si: The service instance (returned from Connect)
               Defaults to the saved service instance
    """
    ...

def GetLocalTicket(si, user):  # -> tuple[Any, str]:
    ...

def GetSi():  # -> None:
    """Get the saved service instance."""
    ...

def SetSi(si):  # -> None:
    """Set the saved service instance."""
    ...

def GetStub():  # -> None:
    """Get the global saved stub."""
    ...

class Connection:
    def __init__(self, *args, **kwargs) -> None: ...
    def __enter__(self):  # -> ServiceInstance:
        ...

    def __exit__(self, *exc_info):  # -> None:
        ...

class SmartConnection:
    def __init__(self, *args, **kwargs) -> None: ...
    def __enter__(self):  # -> ServiceInstance:
        ...

    def __exit__(self, *exc_info):  # -> None:
        ...

def SmartStubAdapter(
    host=...,
    port=...,
    path=...,
    url=...,
    sock=...,
    poolSize=...,
    certFile=...,
    certKeyFile=...,
    httpProxyHost=...,
    httpProxyPort=...,
    sslProxyPath=...,
    thumbprint=...,
    cacertsFile=...,
    preferredApiVersions=...,
    acceptCompressedResponses=...,
    samlToken=...,
    sslContext=...,
    httpConnectionTimeout=...,
    connectionPoolTimeout=...,
    disableSslCertValidation=...,
    customHeaders=...,
):  # -> SoapStubAdapter:
    """
    Determine the most preferred API version supported by the specified server,
    then create a soap stub adapter using that version

    The parameters are the same as for pyVmomi.SoapStubAdapter except for
    version which is renamed to prefferedApiVersions

    @param preferredApiVersions: Acceptable API version(s) (e.g. vim.version.version9)
                                    If a list of versions is specified the versions should
                                    be ordered from most to least preferred.  If None is
                                    specified, the list of versions support by pyVmomi will
                                    be used.
    @type  preferredApiVersions: string or string list
    @type  disableSslCertValidation: bool
    @param disableSslCertValidation: Creates an unverified SSL context when True.
    @type  customHeaders: dict
    @param customHeaders: Dictionary with custom HTTP headers.
    """
    ...

def SmartConnect(
    protocol=...,
    host=...,
    port=...,
    user=...,
    pwd=...,
    service=...,
    path=...,
    preferredApiVersions=...,
    keyFile=...,
    certFile=...,
    httpProxyHost=...,
    httpProxyPort=...,
    thumbprint=...,
    sslContext=...,
    httpConnectionTimeout=...,
    connectionPoolTimeout=...,
    token=...,
    tokenType=...,
    disableSslCertValidation=...,
    customHeaders=...,
    b64token=...,
    mechanism=...,
):  # -> ServiceInstance:
    """
    Determine the most preferred API version supported by the specified server,
    then connect to the specified server using that API version, login and return
    the service instance object.

    Throws any exception back to caller. The service instance object is
    also saved in the library for easy access.

    Clients should modify the service parameter only when connecting to
    a VMOMI server other than hostd/vpxd. For both of the latter, the
    default value is fine.

    @param protocol: What protocol to use for the connection (e.g. https or http).
    @type  protocol: string
    @param host: Which host to connect to.
    @type  host: string
    @param port: Port
    @type  port: int
    @param user: User
    @type  user: string
    @param pwd: Password
    @type  pwd: string
    @param service: Service
    @type  service: string
    @param path: Path
    @type  path: string
    @param preferredApiVersions: Acceptable API version(s) (e.g. vim.version.version9)
                                If a list of versions is specified the versions should
                                be ordered from most to least preferred.  If None is
                                specified, the list of versions support by pyVmomi will
                                be used.
    @type  preferredApiVersions: string or string list
    @param keyFile: ssl key file path
    @type  keyFile: string
    @param certFile: ssl cert file path
    @type  certFile: string
    @param httpProxyHost The host name of the proxy server.
    @type  httpProxyHost: string
    @param httpProxyPort The proxy server port.
    @type  httpProxyPort: int
    @param thumbprint: host cert thumbprint
    @type  thumbprint: string
    @param sslContext: SSL Context describing the various SSL options. It is only
                        supported in Python 2.7.9 or higher.
    @type  sslContext: SSL.Context
    @param httpConnectionTimeout: Timeout in secs for http requests.
    @type  httpConnectionTimeout: int
    @param connectionPoolTimeout: Timeout in secs for idle connections to close, specify
                                    negative numbers for never closing the connections
    @type  connectionPoolTimeout: int
    @type  token: string
    @param token: Authentication and Authorization token to use for the connection.
                    The presence of this token overrides the user and pwd parameters.
    @type disableSslCertValidation: bool
    @param disableSslCertValidation: Creates an unverified SSL context when True.
    @type  customHeaders: dict
    @param customHeaders: Dictionary with custom HTTP headers.
    @param b64token: base64 encoded token
           *** Deprecated: Use token instead ***
    @type  b64token: string
    @param mechanism: authentication mechanism: userpass or sspi
           *** Deprecated: Use tokenType instead ***
    @type  mechanism: string
    """
    ...

def OpenUrlWithBasicAuth(url, user=..., pwd=..., verify=...):  # -> _UrlopenRet:
    """
    Open the specified URL, using HTTP basic authentication to provide
    the specified credentials to the server as part of the request.
    Returns the response as a file-like object.
    """
    ...

def OpenPathWithStub(path, stub, verify=...):  # -> _UrlopenRet:
    """
    Open the specified path using HTTP, using the host/port/protocol
    associated with the specified stub.  If the stub has a session cookie,
    it is included with the HTTP request.  Returns the response as a
    file-like object.
    """
    ...

def IsManagedHost():  # -> bool:
    """
    Check whether the host is managed by vCenter
    """
    ...

def parse_hostport(host, port):  # -> tuple[str | Any, int | Any]:
    ...
