"""
This type stub file was generated by pyright.
"""

import io

cERROR_PIPE_BUSY = ...
cSECURITY_SQOS_PRESENT = ...
cSECURITY_ANONYMOUS = ...
MAXIMUM_RETRY_COUNT = ...
def check_closed(f): # -> _Wrapped[(...), Unknown, (self: Unknown, *args: Unknown, **kwargs: Unknown), Unknown]:
    ...

class NpipeSocket:
    """ Partial implementation of the socket API over windows named pipes.
        This implementation is only designed to be used as a client socket,
        and server-specific methods (bind, listen, accept...) are not
        implemented.
    """
    def __init__(self, handle=...) -> None:
        ...
    
    def accept(self):
        ...
    
    def bind(self, address):
        ...
    
    def close(self): # -> None:
        ...
    
    @check_closed
    def connect(self, address, retry_count=...): # -> None:
        ...
    
    @check_closed
    def connect_ex(self, address): # -> None:
        ...
    
    @check_closed
    def detach(self): # -> PyHANDLE | None:
        ...
    
    @check_closed
    def dup(self): # -> NpipeSocket:
        ...
    
    def getpeername(self):
        ...
    
    def getsockname(self):
        ...
    
    def getsockopt(self, level, optname, buflen=...):
        ...
    
    def ioctl(self, control, option):
        ...
    
    def listen(self, backlog):
        ...
    
    def makefile(self, mode=..., bufsize=...): # -> BufferedReader:
        ...
    
    @check_closed
    def recv(self, bufsize, flags=...): # -> str:
        ...
    
    @check_closed
    def recvfrom(self, bufsize, flags=...): # -> tuple[str, Unknown]:
        ...
    
    @check_closed
    def recvfrom_into(self, buf, nbytes=..., flags=...): # -> tuple[Unknown, Unknown]:
        ...
    
    @check_closed
    def recv_into(self, buf, nbytes=...): # -> int:
        ...
    
    @check_closed
    def send(self, string, flags=...): # -> int:
        ...
    
    @check_closed
    def sendall(self, string, flags=...): # -> int:
        ...
    
    @check_closed
    def sendto(self, string, address): # -> int:
        ...
    
    def setblocking(self, flag): # -> None:
        ...
    
    def settimeout(self, value): # -> None:
        ...
    
    def gettimeout(self): # -> int:
        ...
    
    def setsockopt(self, level, optname, value):
        ...
    
    @check_closed
    def shutdown(self, how): # -> None:
        ...
    


class NpipeFileIOBase(io.RawIOBase):
    def __init__(self, npipe_socket) -> None:
        ...
    
    def close(self): # -> None:
        ...
    
    def fileno(self):
        ...
    
    def isatty(self): # -> Literal[False]:
        ...
    
    def readable(self): # -> Literal[True]:
        ...
    
    def readinto(self, buf):
        ...
    
    def seekable(self): # -> Literal[False]:
        ...
    
    def writable(self): # -> Literal[False]:
        ...
    


