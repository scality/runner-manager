"""
This type stub file was generated by pyright.
"""

INDEX_NAME = ...
INDEX_URL = ...
TOKEN_USERNAME = ...
log = ...
def resolve_repository_name(repo_name): # -> tuple[Unknown | Literal['docker.io'], Unknown]:
    ...

def resolve_index_name(index_name): # -> Literal['docker.io']:
    ...

def get_config_header(client, registry): # -> bytes | None:
    ...

def split_repo_name(repo_name): # -> tuple[Literal['docker.io'], Unknown] | tuple[Unknown, ...]:
    ...

def get_credential_store(authconfig, registry): # -> Any | None:
    ...

class AuthConfig(dict):
    def __init__(self, dct, credstore_env=...) -> None:
        ...
    
    @classmethod
    def parse_auth(cls, entries, raise_on_error=...): # -> dict[Unknown, Unknown]:
        """
        Parses authentication entries

        Args:
          entries:        Dict of authentication entries.
          raise_on_error: If set to true, an invalid format will raise
                          InvalidConfigFile

        Returns:
          Authentication registry.
        """
        ...
    
    @classmethod
    def load_config(cls, config_path, config_dict, credstore_env=...): # -> Self@AuthConfig:
        """
        Loads authentication data from a Docker configuration file in the given
        root directory or if config_path is passed use given path.
        Lookup priority:
            explicit config_path parameter > DOCKER_CONFIG environment
            variable > ~/.docker/config.json > ~/.dockercfg
        """
        ...
    
    @property
    def auths(self): # -> dict[Any, Any]:
        ...
    
    @property
    def creds_store(self): # -> None:
        ...
    
    @property
    def cred_helpers(self): # -> dict[Any, Any]:
        ...
    
    @property
    def is_empty(self): # -> bool:
        ...
    
    def resolve_authconfig(self, registry=...): # -> dict[str, str | Unknown] | Any | None:
        """
        Returns the authentication data from the given auth configuration for a
        specific registry. As with the Docker client, legacy entries in the
        config with full URLs are stripped down to hostnames before checking
        for a match. Returns None if no match was found.
        """
        ...
    
    def get_credential_store(self, registry): # -> Any | None:
        ...
    
    def get_all_credentials(self): # -> dict[Any, Any]:
        ...
    
    def add_auth(self, reg, data): # -> None:
        ...
    


def resolve_authconfig(authconfig, registry=..., credstore_env=...): # -> dict[str, str | Unknown] | Any | None:
    ...

def convert_to_hostname(url):
    ...

def decode_auth(auth): # -> tuple[str, str]:
    ...

def encode_header(auth): # -> bytes:
    ...

def parse_auth(entries, raise_on_error=...): # -> dict[Unknown, Unknown]:
    """
    Parses authentication entries

    Args:
      entries:        Dict of authentication entries.
      raise_on_error: If set to true, an invalid format will raise
                      InvalidConfigFile

    Returns:
      Authentication registry.
    """
    ...

def load_config(config_path=..., config_dict=..., credstore_env=...): # -> AuthConfig:
    ...

