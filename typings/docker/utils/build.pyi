"""
This type stub file was generated by pyright.
"""

_SEP = ...
def tar(path, exclude=..., dockerfile=..., fileobj=..., gzip=...): # -> _TemporaryFileWrapper[bytes]:
    ...

def exclude_paths(root, patterns, dockerfile=...): # -> set[Unknown]:
    """
    Given a root directory path and a list of .dockerignore patterns, return
    an iterator of all paths (both regular files and directories) in the root
    directory that do *not* match any of the patterns.

    All paths returned are relative to the root.
    """
    ...

def build_file_list(root): # -> list[Unknown]:
    ...

def create_archive(root, files=..., fileobj=..., gzip=..., extra_files=...): # -> _TemporaryFileWrapper[bytes]:
    ...

def mkbuildcontext(dockerfile): # -> _TemporaryFileWrapper[bytes]:
    ...

def split_path(p): # -> list[str | Any]:
    ...

def normalize_slashes(p): # -> str:
    ...

def walk(root, patterns, default=...): # -> Generator[Unknown, Unknown, None]:
    ...

class PatternMatcher:
    def __init__(self, patterns) -> None:
        ...
    
    def matches(self, filepath): # -> bool:
        ...
    
    def walk(self, root): # -> Generator[Unknown, Unknown, None]:
        ...
    


class Pattern:
    def __init__(self, pattern_str) -> None:
        ...
    
    @classmethod
    def normalize(cls, p): # -> list[str | Any]:
        ...
    
    def match(self, filepath): # -> bool:
        ...
    


