"""
This type stub file was generated by pyright.
"""

from vmware.vapi.bindings.enum import Enum
from vmware.vapi.bindings.struct import VapiStruct
from vmware.vapi.bindings.stub import ApiInterfaceStub, StubFactoryBase, VapiInterface

"""
The ``com.vmware.vcenter.vm_client`` module provides classes for managing
virtual machines.

"""
__author__ = ...
__docformat__ = ...

class GuestOS(Enum):
    """
    The ``GuestOS`` class defines the valid guest operating system types used
    for configuring a virtual machine.

    .. note::
        This class represents an enumerated type in the interface language
        definition. The class contains class attributes which represent the
        values in the current version of the enumerated type. Newer versions of
        the enumerated type may contain new values. To use new values of the
        enumerated type in communication with a server that supports the newer
        version of the API, you instantiate this class. See :ref:`enumerated
        type description page <enumeration_description>`.
    """

    DOS = ...
    WIN_31 = ...
    WIN_95 = ...
    WIN_98 = ...
    WIN_ME = ...
    WIN_NT = ...
    WIN_2000_PRO = ...
    WIN_2000_SERV = ...
    WIN_2000_ADV_SERV = ...
    WIN_XP_HOME = ...
    WIN_XP_PRO = ...
    WIN_XP_PRO_64 = ...
    WIN_NET_WEB = ...
    WIN_NET_STANDARD = ...
    WIN_NET_ENTERPRISE = ...
    WIN_NET_DATACENTER = ...
    WIN_NET_BUSINESS = ...
    WIN_NET_STANDARD_64 = ...
    WIN_NET_ENTERPRISE_64 = ...
    WIN_LONGHORN = ...
    WIN_LONGHORN_64 = ...
    WIN_NET_DATACENTER_64 = ...
    WIN_VISTA = ...
    WIN_VISTA_64 = ...
    WINDOWS_7 = ...
    WINDOWS_7_64 = ...
    WINDOWS_7_SERVER_64 = ...
    WINDOWS_8 = ...
    WINDOWS_8_64 = ...
    WINDOWS_8_SERVER_64 = ...
    WINDOWS_9 = ...
    WINDOWS_9_64 = ...
    WINDOWS_9_SERVER_64 = ...
    WINDOWS_11_64 = ...
    WINDOWS_12_64 = ...
    WINDOWS_HYPERV = ...
    WINDOWS_SERVER_2019 = ...
    WINDOWS_SERVER_2021 = ...
    WINDOWS_SERVER_2025 = ...
    FREEBSD = ...
    FREEBSD_64 = ...
    FREEBSD_11 = ...
    FREEBSD_12 = ...
    FREEBSD_13 = ...
    FREEBSD_14 = ...
    FREEBSD_11_64 = ...
    FREEBSD_12_64 = ...
    FREEBSD_13_64 = ...
    FREEBSD_14_64 = ...
    REDHAT = ...
    RHEL_2 = ...
    RHEL_3 = ...
    RHEL_3_64 = ...
    RHEL_4 = ...
    RHEL_4_64 = ...
    RHEL_5 = ...
    RHEL_5_64 = ...
    RHEL_6 = ...
    RHEL_6_64 = ...
    RHEL_7 = ...
    RHEL_7_64 = ...
    RHEL_8_64 = ...
    RHEL_9_64 = ...
    CENTOS = ...
    CENTOS_64 = ...
    CENTOS_6 = ...
    CENTOS_6_64 = ...
    CENTOS_7 = ...
    CENTOS_7_64 = ...
    CENTOS_8_64 = ...
    CENTOS_9_64 = ...
    ORACLE_LINUX = ...
    ORACLE_LINUX_64 = ...
    ORACLE_LINUX_6 = ...
    ORACLE_LINUX_6_64 = ...
    ORACLE_LINUX_7 = ...
    ORACLE_LINUX_7_64 = ...
    ORACLE_LINUX_8_64 = ...
    ORACLE_LINUX_9_64 = ...
    SUSE = ...
    SUSE_64 = ...
    SLES = ...
    SLES_64 = ...
    SLES_10 = ...
    SLES_10_64 = ...
    SLES_11 = ...
    SLES_11_64 = ...
    SLES_12 = ...
    SLES_12_64 = ...
    SLES_15_64 = ...
    SLES_16_64 = ...
    NLD_9 = ...
    OES = ...
    SJDS = ...
    MANDRAKE = ...
    MANDRIVA = ...
    MANDRIVA_64 = ...
    TURBO_LINUX = ...
    TURBO_LINUX_64 = ...
    UBUNTU = ...
    UBUNTU_64 = ...
    DEBIAN_4 = ...
    DEBIAN_4_64 = ...
    DEBIAN_5 = ...
    DEBIAN_5_64 = ...
    DEBIAN_6 = ...
    DEBIAN_6_64 = ...
    DEBIAN_7 = ...
    DEBIAN_7_64 = ...
    DEBIAN_8 = ...
    DEBIAN_8_64 = ...
    DEBIAN_9 = ...
    DEBIAN_9_64 = ...
    DEBIAN_10 = ...
    DEBIAN_10_64 = ...
    DEBIAN_11 = ...
    DEBIAN_11_64 = ...
    DEBIAN_12 = ...
    DEBIAN_12_64 = ...
    ASIANUX_3 = ...
    ASIANUX_3_64 = ...
    ASIANUX_4 = ...
    ASIANUX_4_64 = ...
    ASIANUX_5_64 = ...
    ASIANUX_7_64 = ...
    ASIANUX_8_64 = ...
    ASIANUX_9_64 = ...
    OPENSUSE = ...
    OPENSUSE_64 = ...
    FEDORA = ...
    FEDORA_64 = ...
    COREOS_64 = ...
    VMWARE_PHOTON_64 = ...
    OTHER_24X_LINUX = ...
    OTHER_24X_LINUX_64 = ...
    OTHER_26X_LINUX = ...
    OTHER_26X_LINUX_64 = ...
    OTHER_3X_LINUX = ...
    OTHER_3X_LINUX_64 = ...
    OTHER_4X_LINUX = ...
    OTHER_4X_LINUX_64 = ...
    OTHER_5X_LINUX = ...
    OTHER_5X_LINUX_64 = ...
    OTHER_6X_LINUX = ...
    OTHER_6X_LINUX_64 = ...
    OTHER_LINUX = ...
    GENERIC_LINUX = ...
    OTHER_LINUX_64 = ...
    SOLARIS_6 = ...
    SOLARIS_7 = ...
    SOLARIS_8 = ...
    SOLARIS_9 = ...
    SOLARIS_10 = ...
    SOLARIS_10_64 = ...
    SOLARIS_11_64 = ...
    OS2 = ...
    ECOMSTATION = ...
    ECOMSTATION_2 = ...
    NETWARE_4 = ...
    NETWARE_5 = ...
    NETWARE_6 = ...
    OPENSERVER_5 = ...
    OPENSERVER_6 = ...
    UNIXWARE_7 = ...
    DARWIN = ...
    DARWIN_64 = ...
    DARWIN_10 = ...
    DARWIN_10_64 = ...
    DARWIN_11 = ...
    DARWIN_11_64 = ...
    DARWIN_12_64 = ...
    DARWIN_13_64 = ...
    DARWIN_14_64 = ...
    DARWIN_15_64 = ...
    DARWIN_16_64 = ...
    DARWIN_17_64 = ...
    DARWIN_18_64 = ...
    DARWIN_19_64 = ...
    DARWIN_20_64 = ...
    DARWIN_21_64 = ...
    DARWIN_22_64 = ...
    DARWIN_23_64 = ...
    VMKERNEL = ...
    VMKERNEL_5 = ...
    VMKERNEL_6 = ...
    VMKERNEL_65 = ...
    VMKERNEL_7 = ...
    VMKERNEL_8 = ...
    AMAZONLINUX2_64 = ...
    AMAZONLINUX3_64 = ...
    CRXPOD_1 = ...
    ROCKYLINUX_64 = ...
    ALMALINUX_64 = ...
    OTHER = ...
    OTHER_64 = ...
    def __init__(self, string) -> None:
        """
        :type  string: :class:`str`
        :param string: String value for the :class:`GuestOS` instance.
        """
        ...

class GuestOSFamily(Enum):
    """
    The ``GuestOSFamily`` class defines the valid guest operating system family
    types reported by a virtual machine. This enumeration was added in vSphere
    API 6.7.

    .. note::
        This class represents an enumerated type in the interface language
        definition. The class contains class attributes which represent the
        values in the current version of the enumerated type. Newer versions of
        the enumerated type may contain new values. To use new values of the
        enumerated type in communication with a server that supports the newer
        version of the API, you instantiate this class. See :ref:`enumerated
        type description page <enumeration_description>`.
    """

    WINDOWS = ...
    LINUX = ...
    NETWARE = ...
    SOLARIS = ...
    DARWIN = ...
    OTHER = ...
    def __init__(self, string) -> None:
        """
        :type  string: :class:`str`
        :param string: String value for the :class:`GuestOSFamily` instance.
        """
        ...

class DataSets(VapiInterface):
    """
    The ``DataSets`` class provides methods for sharing information between a
    virtual machine and its guest operating system.

    See the VMware Guest SDK Programming Guide for details on using DataSets
    from within a virtual machine.

    Information is grouped into data sets, each of which contains key-value
    entries comprising the data. It's expected that each application using the
    service will have at least one unique data set in which to store its data
    to avoid conflict with other applications. Each data set has attributes
    defining its access control and interoperability configuration.

    It's not recommended that sensitive data (for example, passwords or private
    keys) be stored in plain-text. The data will be visible to other
    applications, running both on the management network and within the guest.
    The data can also be exposed by backups or templates.

    Data set support requires the virtual machine be at virtual hardware
    version :attr:`Hardware.Version.VMX_20` or later.

    Data sets should only be modified by the application that creates them.
    Otherwise the application may stop working.. This class was added in
    vSphere API 8.0.0.0.
    """

    _VAPI_SERVICE_ID = ...
    def __init__(self, config) -> None:
        """
        :type  config: :class:`vmware.vapi.bindings.stub.StubConfiguration`
        :param config: Configuration to be used for creating the stub.
        """
        ...

    class Access(Enum):
        """
        Possible Entry access modes. This enumeration was added in vSphere API
        8.0.0.0.

        .. note::
            This class represents an enumerated type in the interface language
            definition. The class contains class attributes which represent the
            values in the current version of the enumerated type. Newer versions of
            the enumerated type may contain new values. To use new values of the
            enumerated type in communication with a server that supports the newer
            version of the API, you instantiate this class. See :ref:`enumerated
            type description page <enumeration_description>`.
        """

        NONE = ...
        READ_ONLY = ...
        READ_WRITE = ...
        def __init__(self, string) -> None:
            """
            :type  string: :class:`str`
            :param string: String value for the :class:`Access` instance.
            """
            ...

    class Info(VapiStruct):
        """
        The ``DataSets.Info`` class describes a data set. This class was added in
        vSphere API 8.0.0.0.

        .. tip::
            The arguments are used to initialize data attributes with the same
            names.
        """

        def __init__(
            self,
            name=...,
            description=...,
            host=...,
            guest=...,
            used=...,
            omit_from_snapshot_and_clone=...,
        ) -> None:
            """
            :type  name: :class:`str`
            :param name: The name of the data set. This attribute was added in vSphere API
                8.0.0.0.
            :type  description: :class:`str`
            :param description: A description of how the data set is used by its creator. This
                attribute was added in vSphere API 8.0.0.0.
            :type  host: :class:`DataSets.Access`
            :param host: Host access control.

                Controls access to the data set by the
                :class:`com.vmware.vcenter.vm.data_sets_client.Entries` methods..
                This attribute was added in vSphere API 8.0.0.0.
            :type  guest: :class:`DataSets.Access`
            :param guest: Guest access control.

                Controls access to the data set from in-guest APIs.. This attribute
                was added in vSphere API 8.0.0.0.
            :type  used: :class:`long`
            :param used: The total size in bytes of the Entry data in use by this data set.
                This attribute was added in vSphere API 8.0.0.0.
            :type  omit_from_snapshot_and_clone: :class:`bool`
            :param omit_from_snapshot_and_clone: If :class:`set`, the data set is considered a property of the
                virtual machine, and is not included in a snapshot operation or
                when the virtual machine is cloned. When a virtual machine is
                reverted to a snapshot, any data set with {\\\\@link
                #omitFromSnapshotAndClone) :class:`set` will be destroyed. Any data
                set with :attr:`DataSets.Info.omit_from_snapshot_and_clone` None
                will be restored to the state when the snapshot was created. This
                attribute was added in vSphere API 8.0.0.0.
            """
            ...

    class CreateSpec(VapiStruct):
        """
        The ``DataSets.CreateSpec`` class describes a data set to be created. This
        class was added in vSphere API 8.0.0.0.

        .. tip::
            The arguments are used to initialize data attributes with the same
            names.
        """

        def __init__(
            self,
            name=...,
            description=...,
            host=...,
            guest=...,
            omit_from_snapshot_and_clone=...,
        ) -> None:
            """
            :type  name: :class:`str`
            :param name: The name of the data set. **It is recommended that this value take
                the form "com.company.project" to avoid conflict with other
                uses.**. This attribute was added in vSphere API 8.0.0.0.
            :type  description: :class:`str`
            :param description: A description of how the data set is used by its creator. This
                field can contain up to 1024 bytes. This attribute was added in
                vSphere API 8.0.0.0.
            :type  host: :class:`DataSets.Access`
            :param host: Host access control.

                Controls access to the data set by the
                :class:`com.vmware.vcenter.vm.data_sets_client.Entries` methods..
                This attribute was added in vSphere API 8.0.0.0.
            :type  guest: :class:`DataSets.Access`
            :param guest: Guest access control.

                Controls access to the data set from the in-guest APIs.. This
                attribute was added in vSphere API 8.0.0.0.
            :type  omit_from_snapshot_and_clone: :class:`bool` or ``None``
            :param omit_from_snapshot_and_clone: If :class:`set`, the data set is considered a property of the
                virtual machine, and is not included in a snapshot operation or
                when the virtual machine is cloned. When a virtual machine is
                reverted to a snapshot, any data set with {\\\\@link
                #omitFromSnapshotAndClone) :class:`set` will be destroyed. Any data
                set with :attr:`DataSets.CreateSpec.omit_from_snapshot_and_clone`
                None will be restored to the state when the snapshot was created.
                This attribute was added in vSphere API 8.0.0.0.
                If None, the data set is not copied when a virtual machine is
                cloned or a snapshot is taken.
            """
            ...

    class UpdateSpec(VapiStruct):
        """
        The ``DataSets.UpdateSpec`` class describes attibutes of a data set that
        can be modified. This class was added in vSphere API 8.0.0.0.

        .. tip::
            The arguments are used to initialize data attributes with the same
            names.
        """

        def __init__(
            self, description=..., host=..., guest=..., omit_from_snapshot_and_clone=...
        ) -> None:
            """
            :type  description: :class:`str` or ``None``
            :param description: A description of how the data set is used by its creator. This
                field can contain up to 1024 bytes. This attribute was added in
                vSphere API 8.0.0.0.
                If set, the value is changed.
            :type  host: :class:`DataSets.Access` or ``None``
            :param host: The access control from the host. This attribute was added in
                vSphere API 8.0.0.0.
                If set, the value is changed.
            :type  guest: :class:`DataSets.Access` or ``None``
            :param guest: The access control from the guest. This attribute was added in
                vSphere API 8.0.0.0.
                If set, the value is changed.
            :type  omit_from_snapshot_and_clone: :class:`bool` or ``None``
            :param omit_from_snapshot_and_clone: If :class:`set`, the data set is considered a property of the
                virtual machine, and is not included in a snapshot operation or
                when the virtual machine is cloned. When a virtual machine is
                reverted to a snapshot, any data set with {\\\\@link
                #omitFromSnapshotAndClone) :class:`set` will be destroyed. Any data
                set with :attr:`DataSets.UpdateSpec.omit_from_snapshot_and_clone`
                None will be restored to the state when the snapshot was created.
                This attribute was added in vSphere API 8.0.0.0.
                If set, the value is changed.
            """
            ...

    class Summary(VapiStruct):
        """
        Basic data set information. This class was added in vSphere API 8.0.0.0.

        .. tip::
            The arguments are used to initialize data attributes with the same
            names.
        """

        def __init__(self, data_set=..., name=..., description=...) -> None:
            """
            :type  data_set: :class:`str`
            :param data_set: The identifier of the data set. This attribute was added in vSphere
                API 8.0.0.0.
                When clients pass a value of this class as a parameter, the
                attribute must be an identifier for the resource type:
                ``com.vmware.vcenter.vm.DataSet``. When methods return a value of
                this class as a return value, the attribute will be an identifier
                for the resource type: ``com.vmware.vcenter.vm.DataSet``.
            :type  name: :class:`str`
            :param name: The name of the data set. This attribute was added in vSphere API
                8.0.0.0.
            :type  description: :class:`str`
            :param description: The description of the data set. This attribute was added in
                vSphere API 8.0.0.0.
            """
            ...

    def create(self, vm, spec):
        """
        Creates a new data set. This method was added in vSphere API 8.0.0.0.

        :type  vm: :class:`str`
        :param vm: Identifier of the virtual machine.
            The parameter must be an identifier for the resource type:
            ``VirtualMachine``.
        :type  spec: :class:`DataSets.CreateSpec`
        :param spec: Specification of the data set to be created.
        :rtype: :class:`str`
        :return: The identifier of the new data set.
            The return value will be an identifier for the resource type:
            ``com.vmware.vcenter.vm.DataSet``.
        :raise: :class:`com.vmware.vapi.std.errors_client.AlreadyExists`
            if the data set with the same name already exists.
        :raise: :class:`com.vmware.vapi.std.errors_client.Error`
            if the system reports an error while responding to the request.
        :raise: :class:`com.vmware.vapi.std.errors_client.InvalidArgument`
            if the specification is incorrect.
        :raise: :class:`com.vmware.vapi.std.errors_client.NotAllowedInCurrentState`
            if the virtual machine is in a state that doesn't allow
            modifications, for example suspended.
        :raise: :class:`com.vmware.vapi.std.errors_client.NotFound`
            if the virtual machine is not found.
        :raise: :class:`com.vmware.vapi.std.errors_client.ServiceUnavailable`
            if the system is unable to communicate with a service to complete
            the request.
        :raise: :class:`com.vmware.vapi.std.errors_client.UnableToAllocateResource`
            if the new data set requires more resources than are available.
        :raise: :class:`com.vmware.vapi.std.errors_client.Unauthorized`
            if the user doesn't have the required privileges.
        :raise: :class:`com.vmware.vapi.std.errors_client.Unsupported`
            if the virtual hardware version of the virtual machine does not
            support DataSets
        :raise: :class:`com.vmware.vapi.std.errors_client.Unsupported`
            if the ESXi host version does not support DataSets
        :raise: :class:`com.vmware.vapi.std.errors_client.Unauthorized`
            if you do not have all of the privileges described as follows:

            * The resource ``VirtualMachine`` referenced by the parameter
              ``vm`` requires ``VirtualMachine.DataSets.DataSetCreate``.
        """
        ...

    def delete(self, vm, data_set, force=...):
        """
        Delete a data set. This method was added in vSphere API 8.0.0.0.

        :type  vm: :class:`str`
        :param vm: Identifier of the virtual machine.
            The parameter must be an identifier for the resource type:
            ``VirtualMachine``.
        :type  data_set: :class:`str`
        :param data_set: Identifier of the data set to be deleted.
            The parameter must be an identifier for the resource type:
            ``com.vmware.vcenter.vm.DataSet``.
        :type  force: :class:`bool` or ``None``
        :param force: If true, delete the data set even if it is not empty.
            If None a :class:`com.vmware.vapi.std.errors_client.ResourceInUse`
            exception will be reported if the data set is not empty. This is
            the equivalent of passing the value false.
        :raise: :class:`com.vmware.vapi.std.errors_client.Error`
            if the system reports an error while responding to the request.
        :raise: :class:`com.vmware.vapi.std.errors_client.NotAllowedInCurrentState`
            if the virtual machine is in a state that doesn't allow
            modifications, for example suspended.
        :raise: :class:`com.vmware.vapi.std.errors_client.NotFound`
            if the virtual machine is not found.
        :raise: :class:`com.vmware.vapi.std.errors_client.NotFound`
            if the data set is not found.
        :raise: :class:`com.vmware.vapi.std.errors_client.ResourceInUse`
            if the data set is not empty and ``force`` is not :class:`set`.
        :raise: :class:`com.vmware.vapi.std.errors_client.ServiceUnavailable`
            if the system is unable to communicate with a service to complete
            the request.
        :raise: :class:`com.vmware.vapi.std.errors_client.Unauthorized`
            if the user doesn't have the required privileges.
        :raise: :class:`com.vmware.vapi.std.errors_client.Unsupported`
            if the virtual hardware version of the virtual machine does not
            support DataSets
        :raise: :class:`com.vmware.vapi.std.errors_client.Unsupported`
            if the ESXi host version does not support DataSets
        :raise: :class:`com.vmware.vapi.std.errors_client.Unauthorized`
            if you do not have all of the privileges described as follows:

            * The resource ``VirtualMachine`` referenced by the parameter
              ``vm`` requires ``VirtualMachine.DataSets.DataSetDelete``.
        """
        ...

    def get(self, vm, data_set):
        """
        Returns information describing a data set. This method was added in
        vSphere API 8.0.0.0.

        :type  vm: :class:`str`
        :param vm: Identifier of the virtual machine.
            The parameter must be an identifier for the resource type:
            ``VirtualMachine``.
        :type  data_set: :class:`str`
        :param data_set: Identifier of the data set to be queried.
            The parameter must be an identifier for the resource type:
            ``com.vmware.vcenter.vm.DataSet``.
        :rtype: :class:`DataSets.Info`
        :return: Details about the data set.
        :raise: :class:`com.vmware.vapi.std.errors_client.Error`
            if the system reports an error while responding to the request.
        :raise: :class:`com.vmware.vapi.std.errors_client.NotFound`
            if the virtual machine is not found.
        :raise: :class:`com.vmware.vapi.std.errors_client.NotFound`
            if the data set is not found.
        :raise: :class:`com.vmware.vapi.std.errors_client.ServiceUnavailable`
            if the system is unable to communicate with a service to complete
            the request.
        :raise: :class:`com.vmware.vapi.std.errors_client.Unauthorized`
            if the user doesn't have the required privileges.
        :raise: :class:`com.vmware.vapi.std.errors_client.Unsupported`
            if the virtual hardware version of the virtual machine does not
            support DataSets
        :raise: :class:`com.vmware.vapi.std.errors_client.Unsupported`
            if the ESXi host version does not support DataSets
        :raise: :class:`com.vmware.vapi.std.errors_client.Unauthorized`
            if you do not have all of the privileges described as follows:

            * The resource ``VirtualMachine`` referenced by the parameter
              ``vm`` requires ``VirtualMachine.DataSets.DataSetGet``.
        """
        ...

    def update(self, vm, data_set, spec):
        """
        Modifies the attributes of a data set. This method was added in vSphere
        API 8.0.0.0.

        :type  vm: :class:`str`
        :param vm: Identifier of the virtual machine.
            The parameter must be an identifier for the resource type:
            ``VirtualMachine``.
        :type  data_set: :class:`str`
        :param data_set: Identifier of the data set to be queried.
            The parameter must be an identifier for the resource type:
            ``com.vmware.vcenter.vm.DataSet``.
        :type  spec: :class:`DataSets.UpdateSpec`
        :param spec: new attributes of the data set. Data sets should only be modified
            by the application that creates them. Otherwise the application may
            stop working.
        :raise: :class:`com.vmware.vapi.std.errors_client.Error`
            if the system reports an error while responding to the request.
        :raise: :class:`com.vmware.vapi.std.errors_client.InvalidArgument`
            if any of the new attributes are invalid.
        :raise: :class:`com.vmware.vapi.std.errors_client.NotAllowedInCurrentState`
            if the virtual machine is in a state that doesn't allow
            modification, for example suspendeds.
        :raise: :class:`com.vmware.vapi.std.errors_client.NotFound`
            if the virtual machine is not found.
        :raise: :class:`com.vmware.vapi.std.errors_client.NotFound`
            if the data set is not found.
        :raise: :class:`com.vmware.vapi.std.errors_client.ServiceUnavailable`
            if the system is unable to communicate with a service to complete
            the request.
        :raise: :class:`com.vmware.vapi.std.errors_client.UnableToAllocateResource`
            if the new data set attributes requires more resources than are
            available.
        :raise: :class:`com.vmware.vapi.std.errors_client.Unauthorized`
            if the user doesn't have the required privileges.
        :raise: :class:`com.vmware.vapi.std.errors_client.Unsupported`
            if the virtual hardware version of the virtual machine does not
            support DataSets
        :raise: :class:`com.vmware.vapi.std.errors_client.Unsupported`
            if the ESXi host version does not support DataSets
        :raise: :class:`com.vmware.vapi.std.errors_client.Unauthorized`
            if you do not have all of the privileges described as follows:

            * The resource ``VirtualMachine`` referenced by the parameter
              ``vm`` requires ``VirtualMachine.DataSets.DataSetUpdate``.
        """
        ...

    def list(self, vm):
        """
        Lists the data sets of a virtual machine. This method was added in
        vSphere API 8.0.0.0.

        :type  vm: :class:`str`
        :param vm: Identifier of the virtual machine.
            The parameter must be an identifier for the resource type:
            ``VirtualMachine``.
        :rtype: :class:`list` of :class:`DataSets.Summary`
        :return: The list of data sets.
        :raise: :class:`com.vmware.vapi.std.errors_client.Error`
            if the system reports an error while responding to the request.
        :raise: :class:`com.vmware.vapi.std.errors_client.NotFound`
            if the virtual machine is not found.
        :raise: :class:`com.vmware.vapi.std.errors_client.ServiceUnavailable`
            if the system is unable to communicate with a service to complete
            the request.
        :raise: :class:`com.vmware.vapi.std.errors_client.Unauthorized`
            if the user doesn't have the required privileges.
        :raise: :class:`com.vmware.vapi.std.errors_client.Unsupported`
            if the virtual hardware version of the virtual machine does not
            support DataSets
        :raise: :class:`com.vmware.vapi.std.errors_client.Unsupported`
            if the ESXi host version does not support DataSets
        :raise: :class:`com.vmware.vapi.std.errors_client.Unauthorized`
            if you do not have all of the privileges described as follows:

            * The resource ``VirtualMachine`` referenced by the parameter
              ``vm`` requires ``VirtualMachine.DataSets.DataSetList``.
        """
        ...

class Hardware(VapiInterface):
    """
    The ``Hardware`` class provides methods for configuring the virtual
    hardware of a virtual machine.
    """

    _VAPI_SERVICE_ID = ...
    def __init__(self, config) -> None:
        """
        :type  config: :class:`vmware.vapi.bindings.stub.StubConfiguration`
        :param config: Configuration to be used for creating the stub.
        """
        ...

    class Version(Enum):
        """
        The ``Hardware.Version`` class defines the valid virtual hardware versions
        for a virtual machine. See https://kb.vmware.com/s/article/1003746 (Virtual
        machine hardware versions (1003746)).

        .. note::
            This class represents an enumerated type in the interface language
            definition. The class contains class attributes which represent the
            values in the current version of the enumerated type. Newer versions of
            the enumerated type may contain new values. To use new values of the
            enumerated type in communication with a server that supports the newer
            version of the API, you instantiate this class. See :ref:`enumerated
            type description page <enumeration_description>`.
        """

        VMX_03 = ...
        VMX_04 = ...
        VMX_06 = ...
        VMX_07 = ...
        VMX_08 = ...
        VMX_09 = ...
        VMX_10 = ...
        VMX_11 = ...
        VMX_12 = ...
        VMX_13 = ...
        VMX_14 = ...
        VMX_15 = ...
        VMX_16 = ...
        VMX_17 = ...
        VMX_18 = ...
        VMX_19 = ...
        VMX_20 = ...
        def __init__(self, string) -> None:
            """
            :type  string: :class:`str`
            :param string: String value for the :class:`Version` instance.
            """
            ...

    class UpgradePolicy(Enum):
        """
        The ``Hardware.UpgradePolicy`` class defines the valid virtual hardware
        upgrade policies for a virtual machine.

        .. note::
            This class represents an enumerated type in the interface language
            definition. The class contains class attributes which represent the
            values in the current version of the enumerated type. Newer versions of
            the enumerated type may contain new values. To use new values of the
            enumerated type in communication with a server that supports the newer
            version of the API, you instantiate this class. See :ref:`enumerated
            type description page <enumeration_description>`.
        """

        NEVER = ...
        AFTER_CLEAN_SHUTDOWN = ...
        ALWAYS = ...
        def __init__(self, string) -> None:
            """
            :type  string: :class:`str`
            :param string: String value for the :class:`UpgradePolicy` instance.
            """
            ...

    class UpgradeStatus(Enum):
        """
        The ``Hardware.UpgradeStatus`` class defines the valid virtual hardware
        upgrade statuses for a virtual machine.

        .. note::
            This class represents an enumerated type in the interface language
            definition. The class contains class attributes which represent the
            values in the current version of the enumerated type. Newer versions of
            the enumerated type may contain new values. To use new values of the
            enumerated type in communication with a server that supports the newer
            version of the API, you instantiate this class. See :ref:`enumerated
            type description page <enumeration_description>`.
        """

        NONE = ...
        PENDING = ...
        SUCCESS = ...
        FAILED = ...
        def __init__(self, string) -> None:
            """
            :type  string: :class:`str`
            :param string: String value for the :class:`UpgradeStatus` instance.
            """
            ...

    class Info(VapiStruct):
        """
        The ``Hardware.Info`` class contains information related to the virtual
        hardware of a virtual machine.

        .. tip::
            The arguments are used to initialize data attributes with the same
            names.
        """

        _validator_list = ...
        def __init__(
            self,
            version=...,
            upgrade_policy=...,
            upgrade_version=...,
            upgrade_status=...,
            upgrade_error=...,
        ) -> None:
            """
            :type  version: :class:`Hardware.Version`
            :param version: Virtual hardware version.
            :type  upgrade_policy: :class:`Hardware.UpgradePolicy`
            :param upgrade_policy: Scheduled upgrade policy.
            :type  upgrade_version: :class:`Hardware.Version`
            :param upgrade_version: Target hardware version to be used on the next scheduled virtual
                hardware upgrade.
                This attribute is optional and it is only relevant when the value
                of ``upgradePolicy`` is one of
                :attr:`Hardware.UpgradePolicy.AFTER_CLEAN_SHUTDOWN` or
                :attr:`Hardware.UpgradePolicy.ALWAYS`.
            :type  upgrade_status: :class:`Hardware.UpgradeStatus`
            :param upgrade_status: Scheduled upgrade status.
            :type  upgrade_error: :class:`Exception`
            :param upgrade_error: Reason for the scheduled upgrade failure.
                This attribute is optional and it is only relevant when the value
                of ``upgradeStatus`` is :attr:`Hardware.UpgradeStatus.FAILED`.
            """
            ...

    class UpdateSpec(VapiStruct):
        """
        The ``Hardware.UpdateSpec`` class describes the updates to virtual hardware
        settings of a virtual machine.

        .. tip::
            The arguments are used to initialize data attributes with the same
            names.
        """

        _validator_list = ...
        def __init__(self, upgrade_policy=..., upgrade_version=...) -> None:
            """
            :type  upgrade_policy: :class:`Hardware.UpgradePolicy` or ``None``
            :param upgrade_policy: Scheduled upgrade policy.

                If set to :attr:`Hardware.UpgradePolicy.NEVER`, the
                :attr:`Hardware.Info.upgrade_version` attribute will be reset to
                None.
                If None, the value is unchanged.
            :type  upgrade_version: :class:`Hardware.Version` or ``None``
            :param upgrade_version: Target hardware version to be used on the next scheduled virtual
                hardware upgrade.

                If specified, this attribute must represent a newer virtual
                hardware version than the current virtual hardware version reported
                in :attr:`Hardware.Info.version`.
                If :attr:`Hardware.UpdateSpec.upgrade_policy` is set to
                :attr:`Hardware.UpgradePolicy.NEVER`, this attribute must be None.
                Otherwise, if this attribute is None, default to the most recent
                virtual hardware version supported by the server.
            """
            ...

    def get(self, vm):
        """
        Returns the virtual hardware settings of a virtual machine.

        :type  vm: :class:`str`
        :param vm: Virtual machine identifier.
            The parameter must be an identifier for the resource type:
            ``VirtualMachine``.
        :rtype: :class:`Hardware.Info`
        :return: Virtual hardware settings of the virtual machine.
        :raise: :class:`com.vmware.vapi.std.errors_client.Error`
            if the system reports an error while responding to the request.
        :raise: :class:`com.vmware.vapi.std.errors_client.NotFound`
            if the virtual machine is not found.
        :raise: :class:`com.vmware.vapi.std.errors_client.ResourceInaccessible`
            if the virtual machine's configuration state cannot be accessed.
        :raise: :class:`com.vmware.vapi.std.errors_client.ServiceUnavailable`
            if the system is unable to communicate with a service to complete
            the request.
        :raise: :class:`com.vmware.vapi.std.errors_client.Unauthenticated`
            if the user can not be authenticated.
        :raise: :class:`com.vmware.vapi.std.errors_client.Unauthorized`
            if the user doesn't have the required privileges.
        """
        ...

    def update(self, vm, spec):
        """
        Updates the virtual hardware settings of a virtual machine.

        :type  vm: :class:`str`
        :param vm: Virtual machine identifier.
            The parameter must be an identifier for the resource type:
            ``VirtualMachine``.
        :type  spec: :class:`Hardware.UpdateSpec`
        :param spec: Specification for updating the virtual hardware settings of the
            virtual machine.
        :raise: :class:`com.vmware.vapi.std.errors_client.Error`
            if the system reports an error while responding to the request.
        :raise: :class:`com.vmware.vapi.std.errors_client.NotFound`
            if the virtual machine is not found.
        :raise: :class:`com.vmware.vapi.std.errors_client.AlreadyInDesiredState`
            if the virtual machine is already configured for the desired
            hardware version.
        :raise: :class:`com.vmware.vapi.std.errors_client.InvalidArgument`
            if the requested virtual hardware version is not newer than the
            current version.
        :raise: :class:`com.vmware.vapi.std.errors_client.Unsupported`
            if the requested virtual hardware version is not supported by the
            server.
        :raise: :class:`com.vmware.vapi.std.errors_client.ResourceBusy`
            if the virtual machine is busy performing another operation.
        :raise: :class:`com.vmware.vapi.std.errors_client.ResourceInaccessible`
            if the virtual machine's configuration state cannot be accessed.
        :raise: :class:`com.vmware.vapi.std.errors_client.ServiceUnavailable`
            if the system is unable to communicate with a service to complete
            the request.
        :raise: :class:`com.vmware.vapi.std.errors_client.Unauthenticated`
            if the user can not be authenticated.
        :raise: :class:`com.vmware.vapi.std.errors_client.Unauthorized`
            if the user doesn't have the required privileges.
        """
        ...

    def upgrade(self, vm, version=...):
        """
        Upgrades the virtual machine to a newer virtual hardware version.

        :type  vm: :class:`str`
        :param vm: Virtual machine identifier.
            The parameter must be an identifier for the resource type:
            ``VirtualMachine``.
        :type  version: :class:`Hardware.Version` or ``None``
        :param version: New virtual machine version.
            If None, defaults to the most recent virtual hardware version
            supported by the server.
        :raise: :class:`com.vmware.vapi.std.errors_client.Error`
            if the system reports an error while responding to the request.
        :raise: :class:`com.vmware.vapi.std.errors_client.NotFound`
            if the virtual machine is not found.
        :raise: :class:`com.vmware.vapi.std.errors_client.NotAllowedInCurrentState`
            if the virtual machine is not powered off.
        :raise: :class:`com.vmware.vapi.std.errors_client.AlreadyInDesiredState`
            if the virtual machine is already configured for the desired
            hardware version.
        :raise: :class:`com.vmware.vapi.std.errors_client.InvalidArgument`
            if ``version`` is older than the current virtual hardware version.
        :raise: :class:`com.vmware.vapi.std.errors_client.Unsupported`
            if ``version`` is not supported by the server.
        :raise: :class:`com.vmware.vapi.std.errors_client.ResourceBusy`
            if the virtual machine is busy performing another operation.
        :raise: :class:`com.vmware.vapi.std.errors_client.ResourceInaccessible`
            if the virtual machine's configuration state cannot be accessed.
        :raise: :class:`com.vmware.vapi.std.errors_client.ServiceUnavailable`
            if the system is unable to communicate with a service to complete
            the request.
        :raise: :class:`com.vmware.vapi.std.errors_client.Unauthenticated`
            if the user can not be authenticated.
        :raise: :class:`com.vmware.vapi.std.errors_client.Unauthorized`
            if the user doesn't have the required privileges.
        """
        ...

class Identity(VapiInterface):
    """
    The ``Identity`` class provides methods for managing the identity of a
    virtual machine. This class was added in vSphere API 6.7.1.
    """

    _VAPI_SERVICE_ID = ...
    def __init__(self, config) -> None:
        """
        :type  config: :class:`vmware.vapi.bindings.stub.StubConfiguration`
        :param config: Configuration to be used for creating the stub.
        """
        ...

    class Info(VapiStruct):
        """
        The ``Identity.Info`` class contains information about the identity of a
        virtual machine. This class was added in vSphere API 6.7.1.

        .. tip::
            The arguments are used to initialize data attributes with the same
            names.
        """

        def __init__(self, name=..., bios_uuid=..., instance_uuid=...) -> None:
            """
            :type  name: :class:`str`
            :param name: Virtual machine name. This attribute was added in vSphere API
                6.7.1.
            :type  bios_uuid: :class:`str`
            :param bios_uuid: 128-bit SMBIOS UUID of a virtual machine represented as a
                hexadecimal string in "12345678-abcd-1234-cdef-123456789abc"
                format. This attribute was added in vSphere API 6.7.1.
            :type  instance_uuid: :class:`str`
            :param instance_uuid: VirtualCenter-specific 128-bit UUID of a virtual machine,
                represented as a hexademical string. This identifier is used by
                VirtualCenter to uniquely identify all virtual machine instances,
                including those that may share the same SMBIOS UUID. This attribute
                was added in vSphere API 6.7.1.
            """
            ...

class LibraryItem(VapiInterface):
    """
    The ``LibraryItem`` class provides methods to identify virtual machines
    managed by Content Library. This class was added in vSphere API 6.9.1.
    """

    _VAPI_SERVICE_ID = ...
    def __init__(self, config) -> None:
        """
        :type  config: :class:`vmware.vapi.bindings.stub.StubConfiguration`
        :param config: Configuration to be used for creating the stub.
        """
        ...

    class Info(VapiStruct):
        """
        The ``LibraryItem.Info`` class contains information about the library item
        associated with a virtual machine. This class was added in vSphere API
        6.9.1.

        .. tip::
            The arguments are used to initialize data attributes with the same
            names.
        """

        def __init__(self, check_out=...) -> None:
            """
            :type  check_out: :class:`LibraryItem.CheckOutInfo` or ``None``
            :param check_out: Information about the checked out virtual machine. This attribute
                was added in vSphere API 6.9.1.
                If None, the virtual machine is not checked out from a library
                item.
            """
            ...

    class CheckOutInfo(VapiStruct):
        """
        The ``LibraryItem.CheckOutInfo`` class contains information about a virtual
        machine checked out of a content library item. This class was added in
        vSphere API 6.9.1.

        .. tip::
            The arguments are used to initialize data attributes with the same
            names.
        """

        def __init__(self, library_item=...) -> None:
            """
            :type  library_item: :class:`str`
            :param library_item: Identifier of the library item that the virtual machine is checked
                out from. This attribute was added in vSphere API 6.9.1.
                When clients pass a value of this class as a parameter, the
                attribute must be an identifier for the resource type:
                ``com.vmware.content.library.Item``. When methods return a value of
                this class as a return value, the attribute will be an identifier
                for the resource type: ``com.vmware.content.library.Item``.
            """
            ...

    def get(self, vm):
        """
        Returns the information about the library item associated with the
        virtual machine. This method was added in vSphere API 6.9.1.

        :type  vm: :class:`str`
        :param vm: Identifier of the virtual machine.
            The parameter must be an identifier for the resource type:
            ``VirtualMachine``.
        :rtype: :class:`LibraryItem.Info`
        :return: Information about the library item associated with the virtual
            machine.
        :raise: :class:`com.vmware.vapi.std.errors_client.NotFound`
             if the virtual machine is not found.
        :raise: :class:`com.vmware.vapi.std.errors_client.Unauthenticated`
             if the user that requested the method cannot be authenticated.
        :raise: :class:`com.vmware.vapi.std.errors_client.Unauthorized`
            if the user that requested the method is not authorized to perform
            the method.
        """
        ...

class Power(VapiInterface):
    """
    The ``Power`` class provides methods for managing the power state of a
    virtual machine.
    """

    _VAPI_SERVICE_ID = ...
    def __init__(self, config) -> None:
        """
        :type  config: :class:`vmware.vapi.bindings.stub.StubConfiguration`
        :param config: Configuration to be used for creating the stub.
        """
        ...

    class State(Enum):
        """
        The ``Power.State`` class defines the valid power states for a virtual
        machine.

        .. note::
            This class represents an enumerated type in the interface language
            definition. The class contains class attributes which represent the
            values in the current version of the enumerated type. Newer versions of
            the enumerated type may contain new values. To use new values of the
            enumerated type in communication with a server that supports the newer
            version of the API, you instantiate this class. See :ref:`enumerated
            type description page <enumeration_description>`.
        """

        POWERED_OFF = ...
        POWERED_ON = ...
        SUSPENDED = ...
        def __init__(self, string) -> None:
            """
            :type  string: :class:`str`
            :param string: String value for the :class:`State` instance.
            """
            ...

    class Info(VapiStruct):
        """
        The ``Power.Info`` class contains information about the power state of a
        virtual machine.

        .. tip::
            The arguments are used to initialize data attributes with the same
            names.
        """

        _validator_list = ...
        def __init__(self, state=..., clean_power_off=...) -> None:
            """
            :type  state: :class:`Power.State`
            :param state: Power state of the virtual machine.
            :type  clean_power_off: :class:`bool`
            :param clean_power_off: Flag indicating whether the virtual machine was powered off
                cleanly. This attribute may be used to detect that the virtual
                machine crashed unexpectedly and should be restarted.
                This attribute is optional and it is only relevant when the value
                of ``state`` is :attr:`Power.State.POWERED_OFF`.
            """
            ...

    def get(self, vm):
        """
        Returns the power state information of a virtual machine.

        :type  vm: :class:`str`
        :param vm: Virtual machine identifier.
            The parameter must be an identifier for the resource type:
            ``VirtualMachine``.
        :rtype: :class:`Power.Info`
        :return: Power state information for the specified virtual machine.
        :raise: :class:`com.vmware.vapi.std.errors_client.Error`
            if the system reports an error while responding to the request.
        :raise: :class:`com.vmware.vapi.std.errors_client.NotFound`
            if the virtual machine is not found.
        :raise: :class:`com.vmware.vapi.std.errors_client.ResourceInaccessible`
            if the virtual machine's configuration or execution state cannot be
            accessed.
        :raise: :class:`com.vmware.vapi.std.errors_client.ServiceUnavailable`
            if the system is unable to communicate with a service to complete
            the request.
        :raise: :class:`com.vmware.vapi.std.errors_client.Unauthenticated`
            if the user can not be authenticated.
        :raise: :class:`com.vmware.vapi.std.errors_client.Unauthorized`
            if the user doesn't have the required privileges.
        :raise: :class:`com.vmware.vapi.std.errors_client.Unauthorized`
            if you do not have all of the privileges described as follows:

            * The resource ``VirtualMachine`` referenced by the parameter
              ``vm`` requires ``System.Read``.
        """
        ...

    def start(self, vm):
        """
        Powers on a powered-off or suspended virtual machine.

        :type  vm: :class:`str`
        :param vm: Virtual machine identifier.
            The parameter must be an identifier for the resource type:
            ``VirtualMachine``.
        :raise: :class:`com.vmware.vapi.std.errors_client.Error`
            if the system reports an error while responding to the request.
        :raise: :class:`com.vmware.vapi.std.errors_client.NotFound`
            if the virtual machine is not found.
        :raise: :class:`com.vmware.vapi.std.errors_client.AlreadyInDesiredState`
            if the virtual machine is already powered on.
        :raise: :class:`com.vmware.vapi.std.errors_client.Unsupported`
            if the virtual machine does not support being powered on (e.g.
            marked as a template, serving as a fault-tolerance secondary
            virtual machine).
        :raise: :class:`com.vmware.vapi.std.errors_client.UnableToAllocateResource`
            if resources cannot be allocated for the virtual machine (e.g.
            physical resource allocation policy cannot be satisfied,
            insufficient licenses are available to run the virtual machine).
        :raise: :class:`com.vmware.vapi.std.errors_client.ResourceInaccessible`
            if resources required by the virtual machine are not accessible
            (e.g. virtual machine configuration files or virtual disks are on
            inaccessible storage, no hosts are available to run the virtual
            machine).
        :raise: :class:`com.vmware.vapi.std.errors_client.ResourceInUse`
            if resources required by the virtual machine are in use (e.g.
            virtual machine configuration files or virtual disks are locked,
            host containing the virtual machine is an HA failover host).
        :raise: :class:`com.vmware.vapi.std.errors_client.ResourceBusy`
            if the virtual machine is performing another operation.
        :raise: :class:`com.vmware.vapi.std.errors_client.ServiceUnavailable`
            if the system is unable to communicate with a service to complete
            the request.
        :raise: :class:`com.vmware.vapi.std.errors_client.Unauthenticated`
            if the user can not be authenticated.
        :raise: :class:`com.vmware.vapi.std.errors_client.Unauthorized`
            if the user doesn't have the required privileges.
        :raise: :class:`com.vmware.vapi.std.errors_client.Unauthorized`
            if you do not have all of the privileges described as follows:

            * The resource ``VirtualMachine`` referenced by the parameter
              ``vm`` requires ``VirtualMachine.Interact.PowerOn``.
        """
        ...

    def stop(self, vm):
        """
        Powers off a powered-on or suspended virtual machine.

        :type  vm: :class:`str`
        :param vm: Virtual machine identifier.
            The parameter must be an identifier for the resource type:
            ``VirtualMachine``.
        :raise: :class:`com.vmware.vapi.std.errors_client.Error`
            if the system reports an error while responding to the request.
        :raise: :class:`com.vmware.vapi.std.errors_client.NotFound`
            if the virtual machine is not found.
        :raise: :class:`com.vmware.vapi.std.errors_client.AlreadyInDesiredState`
            if the virtual machine is already powered off.
        :raise: :class:`com.vmware.vapi.std.errors_client.ResourceBusy`
            if the virtual machine is performing another operation.
        :raise: :class:`com.vmware.vapi.std.errors_client.ServiceUnavailable`
            if the system is unable to communicate with a service to complete
            the request.
        :raise: :class:`com.vmware.vapi.std.errors_client.Unauthenticated`
            if the user can not be authenticated.
        :raise: :class:`com.vmware.vapi.std.errors_client.Unauthorized`
            if the user doesn't have the required privileges.
        :raise: :class:`com.vmware.vapi.std.errors_client.Unauthorized`
            if you do not have all of the privileges described as follows:

            * The resource ``VirtualMachine`` referenced by the parameter
              ``vm`` requires ``VirtualMachine.Interact.PowerOff``.
        """
        ...

    def suspend(self, vm):
        """
        Suspends a powered-on virtual machine.

        :type  vm: :class:`str`
        :param vm: Virtual machine identifier.
            The parameter must be an identifier for the resource type:
            ``VirtualMachine``.
        :raise: :class:`com.vmware.vapi.std.errors_client.Error`
            if the system reports an error while responding to the request.
        :raise: :class:`com.vmware.vapi.std.errors_client.NotFound`
            if the virtual machine is not found.
        :raise: :class:`com.vmware.vapi.std.errors_client.AlreadyInDesiredState`
            if the virtual machine is already suspended.
        :raise: :class:`com.vmware.vapi.std.errors_client.NotAllowedInCurrentState`
            if the virtual machine is powered off.
        :raise: :class:`com.vmware.vapi.std.errors_client.ResourceBusy`
            if the virtual machine is performing another operation.
        :raise: :class:`com.vmware.vapi.std.errors_client.ServiceUnavailable`
            if the system is unable to communicate with a service to complete
            the request.
        :raise: :class:`com.vmware.vapi.std.errors_client.Unauthenticated`
            if the user can not be authenticated.
        :raise: :class:`com.vmware.vapi.std.errors_client.Unauthorized`
            if the user doesn't have the required privileges.
        :raise: :class:`com.vmware.vapi.std.errors_client.Unauthorized`
            if you do not have all of the privileges described as follows:

            * The resource ``VirtualMachine`` referenced by the parameter
              ``vm`` requires ``VirtualMachine.Interact.Suspend``.
        """
        ...

    def reset(self, vm):
        """
        Resets a powered-on virtual machine.

        :type  vm: :class:`str`
        :param vm: Virtual machine identifier.
            The parameter must be an identifier for the resource type:
            ``VirtualMachine``.
        :raise: :class:`com.vmware.vapi.std.errors_client.Error`
            if the system reports an error while responding to the request.
        :raise: :class:`com.vmware.vapi.std.errors_client.NotFound`
            if the virtual machine is not found.
        :raise: :class:`com.vmware.vapi.std.errors_client.NotAllowedInCurrentState`
            if the virtual machine is powered off or suspended.
        :raise: :class:`com.vmware.vapi.std.errors_client.ResourceBusy`
            if the virtual machine is performing another operation
        :raise: :class:`com.vmware.vapi.std.errors_client.ServiceUnavailable`
            if the system is unable to communicate with a service to complete
            the request.
        :raise: :class:`com.vmware.vapi.std.errors_client.Unauthenticated`
            if the user can not be authenticated.
        :raise: :class:`com.vmware.vapi.std.errors_client.Unauthorized`
            if the user doesn't have the required privileges.
        :raise: :class:`com.vmware.vapi.std.errors_client.Unauthorized`
            if you do not have all of the privileges described as follows:

            * The resource ``VirtualMachine`` referenced by the parameter
              ``vm`` requires ``VirtualMachine.Interact.Reset``.
        """
        ...

class Tools(VapiInterface):
    """
    The ``Tools`` class provides methods for managing VMware Tools in the guest
    operating system. This class was added in vSphere API 7.0.0.0.
    """

    _VAPI_SERVICE_ID = ...
    def __init__(self, config) -> None:
        """
        :type  config: :class:`vmware.vapi.bindings.stub.StubConfiguration`
        :param config: Configuration to be used for creating the stub.
        """
        ...

    class RunState(Enum):
        """
        Current run state of VMware Tools in the guest operating system. This
        enumeration was added in vSphere API 7.0.0.0.

        .. note::
            This class represents an enumerated type in the interface language
            definition. The class contains class attributes which represent the
            values in the current version of the enumerated type. Newer versions of
            the enumerated type may contain new values. To use new values of the
            enumerated type in communication with a server that supports the newer
            version of the API, you instantiate this class. See :ref:`enumerated
            type description page <enumeration_description>`.
        """

        NOT_RUNNING = ...
        RUNNING = ...
        EXECUTING_SCRIPTS = ...
        def __init__(self, string) -> None:
            """
            :type  string: :class:`str`
            :param string: String value for the :class:`RunState` instance.
            """
            ...

    class UpgradePolicy(Enum):
        """
        The ``Tools.UpgradePolicy`` class defines when Tools are auto-upgraded for
        a virtual machine. This enumeration was added in vSphere API 7.0.0.0.

        .. note::
            This class represents an enumerated type in the interface language
            definition. The class contains class attributes which represent the
            values in the current version of the enumerated type. Newer versions of
            the enumerated type may contain new values. To use new values of the
            enumerated type in communication with a server that supports the newer
            version of the API, you instantiate this class. See :ref:`enumerated
            type description page <enumeration_description>`.
        """

        MANUAL = ...
        UPGRADE_AT_POWER_CYCLE = ...
        def __init__(self, string) -> None:
            """
            :type  string: :class:`str`
            :param string: String value for the :class:`UpgradePolicy` instance.
            """
            ...

    class VersionStatus(Enum):
        """
        The ``Tools.VersionStatus`` class defines the version status types of
        VMware Tools installed in the guest operating system. This enumeration was
        added in vSphere API 7.0.0.0.

        .. note::
            This class represents an enumerated type in the interface language
            definition. The class contains class attributes which represent the
            values in the current version of the enumerated type. Newer versions of
            the enumerated type may contain new values. To use new values of the
            enumerated type in communication with a server that supports the newer
            version of the API, you instantiate this class. See :ref:`enumerated
            type description page <enumeration_description>`.
        """

        NOT_INSTALLED = ...
        CURRENT = ...
        UNMANAGED = ...
        TOO_OLD_UNSUPPORTED = ...
        SUPPORTED_OLD = ...
        SUPPORTED_NEW = ...
        TOO_NEW = ...
        BLACKLISTED = ...
        def __init__(self, string) -> None:
            """
            :type  string: :class:`str`
            :param string: String value for the :class:`VersionStatus` instance.
            """
            ...

    class ToolsInstallType(Enum):
        """
        The ``Tools.ToolsInstallType`` class defines the installation type of the
        Tools in the guest operating system. This enumeration was added in vSphere
        API 7.0.0.0.

        .. note::
            This class represents an enumerated type in the interface language
            definition. The class contains class attributes which represent the
            values in the current version of the enumerated type. Newer versions of
            the enumerated type may contain new values. To use new values of the
            enumerated type in communication with a server that supports the newer
            version of the API, you instantiate this class. See :ref:`enumerated
            type description page <enumeration_description>`.
        """

        UNKNOWN = ...
        MSI = ...
        TAR = ...
        OSP = ...
        OPEN_VM_TOOLS = ...
        def __init__(self, string) -> None:
            """
            :type  string: :class:`str`
            :param string: String value for the :class:`ToolsInstallType` instance.
            """
            ...

    class Info(VapiStruct):
        """
        The ``Tools.Info`` class describes the VMWare Tools properties of a virtual
        machine. This class was added in vSphere API 7.0.0.0.

        .. tip::
            The arguments are used to initialize data attributes with the same
            names.
        """

        def __init__(
            self,
            auto_update_supported=...,
            install_attempt_count=...,
            error=...,
            version_number=...,
            version=...,
            upgrade_policy=...,
            version_status=...,
            install_type=...,
            run_state=...,
        ) -> None:
            """
            :type  auto_update_supported: :class:`bool`
            :param auto_update_supported: Set if the virtual machine supports auto-upgrading Tools via
                :class:`Tools.UpgradePolicy`. This attribute was added in vSphere
                API 7.0.0.0.
            :type  install_attempt_count: :class:`long` or ``None``
            :param install_attempt_count: Number of attempts that have been made to install or upgrade the
                version of Tools installed on this virtual machine. This attribute
                was added in vSphere API 7.0.0.0.
                This attribute will be None if there have been no Tools install or
                upgrade attempt.
            :type  error: :class:`Exception` or ``None``
            :param error: Error that happened, if any, during last attempt to upgrade or
                install Tools. This attribute was added in vSphere API 7.0.0.0.
                This attribute will be None if a the last Tools install or upgrade
                attempt succeeded.
            :type  version_number: :class:`long` or ``None``
            :param version_number: Version of VMware Tools installed on the guest operating system.
                This attribute was added in vSphere API 7.0.0.0.
                This attribute wil be None if VMWare Tools is not installed. This
                is an integer constructed as follows: (((MJR) << 10) + ((MNR) << 5)
                + (REV)) Where MJR is tha major verson, MNR is the minor version
                and REV is the revision. Tools version = T Tools Version Major =
                MJR = (T / 1024) Tools Version Minor = MNR = ((T % 1024) / 32)
                Tools Version Revision = BASE = ((T % 1024) % 32) Tools actual
                version = MJR.MNR.REV
            :type  version: :class:`str` or ``None``
            :param version: Version of VMware Tools installed on the guest operating system.
                This is a human-readable value that should not be parsed. This
                attribute was added in vSphere API 7.0.0.0.
                This attribute wil be None if VMWare Tools is not installed.
            :type  upgrade_policy: :class:`Tools.UpgradePolicy`
            :param upgrade_policy: Tools upgrade policy setting for the virtual machine.
                :class:`Tools.UpgradePolicy`. This attribute was added in vSphere
                API 7.0.0.0.
            :type  version_status: :class:`Tools.VersionStatus` or ``None``
            :param version_status: Current version status of VMware Tools in the guest operating
                system, if known. This attribute was added in vSphere API 7.0.0.0.
                This attribute will be None if the version status is not known, for
                example if VMware Tools is too old to report the information.
            :type  install_type: :class:`Tools.ToolsInstallType` or ``None``
            :param install_type: Current installation type of VMware Tools in the guest operating
                system. This attribute was added in vSphere API 7.0.0.0.
                This attribute will be None if the installation type is not known,
                for example if VMware Tools is too old to report the information.
            :type  run_state: :class:`Tools.RunState`
            :param run_state: Current run state of VMware Tools in the guest operating system.
                This attribute was added in vSphere API 7.0.0.0.
            """
            ...

    class UpdateSpec(VapiStruct):
        """
        The (\\\\@name UpdateSpec} class describes the VMware Tools properties of a
        virtual machine that can be updated. This class was added in vSphere API
        7.0.0.0.

        .. tip::
            The arguments are used to initialize data attributes with the same
            names.
        """

        def __init__(self, upgrade_policy=...) -> None:
            """
            :type  upgrade_policy: :class:`Tools.UpgradePolicy` or ``None``
            :param upgrade_policy: Tools upgrade policy setting for the virtual machine.
                :class:`Tools.UpgradePolicy`. This attribute was added in vSphere
                API 7.0.0.0.
                If None the upgrade policy will not be modified.
            """
            ...

    def get(self, vm):
        """
        Get the properties of VMware Tools. This method was added in vSphere
        API 7.0.0.0.

        :type  vm: :class:`str`
        :param vm: Identifier of the virtual machine.
            The parameter must be an identifier for the resource type:
            ``VirtualMachine``.
        :rtype: :class:`Tools.Info`
        :return: VMware Tools properties.
        :raise: :class:`com.vmware.vapi.std.errors_client.Error`
            if the system reports an error while responding to the request.
        :raise: :class:`com.vmware.vapi.std.errors_client.NotFound`
            if the virtual machine is not found.
        :raise: :class:`com.vmware.vapi.std.errors_client.Unauthenticated`
            if the user cannot be authenticated.
        """
        ...

    def update(self, vm, spec):
        """
        Update the properties of VMware Tools. This method was added in vSphere
        API 7.0.0.0.

        :type  vm: :class:`str`
        :param vm: Identifier of the virtual machine.
            The parameter must be an identifier for the resource type:
            ``VirtualMachine``.
        :type  spec: :class:`Tools.UpdateSpec`
        :param spec: The new values.
        :raise: :class:`com.vmware.vapi.std.errors_client.Error`
            if the system reports an error while responding to the request.
        :raise: :class:`com.vmware.vapi.std.errors_client.InvalidArgument`
            if the :attr:`Tools.UpdateSpec.upgrade_policy` attribute contains a
            value that is not supported by the server.
        :raise: :class:`com.vmware.vapi.std.errors_client.NotFound`
            if the virtual machine is not found.
        :raise: :class:`com.vmware.vapi.std.errors_client.Unauthenticated`
            if the user cannot be authenticated.
        """
        ...

    def upgrade(self, vm, command_line_options=...):
        """
        Begins the Tools upgrade process. To monitor the status of the Tools
        upgrade, clients should check the Tools status by calling
        :func:`Tools.get` and examining ``versionStatus`` and ``runState``.
        This method was added in vSphere API 7.0.0.0.

        :type  vm: :class:`str`
        :param vm: Identifier of the virtual machine.
            The parameter must be an identifier for the resource type:
            ``VirtualMachine``.
        :type  command_line_options: :class:`str` or ``None``
        :param command_line_options: Command line options passed to the installer to modify the
            installation procedure for Tools.
            Set if any additional options are desired.
        :raise: :class:`com.vmware.vapi.std.errors_client.NotFound`
            if the virtual machine is not found.
        :raise: :class:`com.vmware.vapi.std.errors_client.ServiceUnavailable`
            if the VMware Tools are not running.
        :raise: :class:`com.vmware.vapi.std.errors_client.NotAllowedInCurrentState`
            if the virtual machine is not powered on.
        :raise: :class:`com.vmware.vapi.std.errors_client.AlreadyInDesiredState`
            is an upgrade is already in progress.
        :raise: :class:`com.vmware.vapi.std.errors_client.Error`
            if the upgrade process fails inside the guest operating system.
        :raise: :class:`com.vmware.vapi.std.errors_client.Unauthenticated`
            if the user cannot be authenticated.
        """
        ...

class _DataSetsStub(ApiInterfaceStub):
    def __init__(self, config) -> None: ...

class _HardwareStub(ApiInterfaceStub):
    def __init__(self, config) -> None: ...

class _IdentityStub(ApiInterfaceStub):
    def __init__(self, config) -> None: ...

class _LibraryItemStub(ApiInterfaceStub):
    def __init__(self, config) -> None: ...

class _PowerStub(ApiInterfaceStub):
    def __init__(self, config) -> None: ...

class _ToolsStub(ApiInterfaceStub):
    def __init__(self, config) -> None: ...

class StubFactory(StubFactoryBase):
    _attrs = ...
