"""
This type stub file was generated by pyright.
"""

"""
vAPI Connection factory
"""
__author__ = ...
__copyright__ = ...
REQUESTS_RPC_PROVIDER_NAME = ...

def check_file_exists(filename):  # -> None:
    """
    Check if name is a file and exists

    :type  :class:`str`
    :param file name
    """
    ...

def get_connector(
    rpc_provider_name, msg_protocol, ssl_context=..., **kwargs
):  # -> Any | None:
    """
    Create a connection to the vAPI Provider using the specified arguments

    :type  rpc_provider_name: :class:`str`
    :param rpc_provider_name: The RPC provider to be used for the connection.
                              Valid values are 'http', 'https' and 'requests'
    :type  msg_protocol: :class:`str`
    :param msg_protocol: The message protocol to be used for the connection.
                         Valid values are 'json'.
    :type  ssl_context: :class:`OpenSSL.SSL.Context`
    :param ssl_context: SSL context to use for SSL connections
    :param kwargs: Additional arguments for the RPC provider

    :rtype:  :class:`vmware.vapi.protocol.client.connector.Connector`
    :return: Connection to the vAPI provider
    """
    ...

def get_saml_hok_connector(
    rpc_provider_name, msg_protocol=..., ssl_context=..., **kwargs
):  # -> Any | None:
    """
    Create a connection that uses SAML Hok based authentication
    to connect to a vAPI Provider

    :type  rpc_provider_name: :class:`str`
    :param rpc_provider_name: The RPC provider to be used for the connection.
                              Valid values are 'http', 'https' or 'requests'
    :type  msg_protocol: :class:`str`
    :param msg_protocol: The message protocol to be used for the connection.
                         Valid values are 'json'.
    :type  ssl_context: :class:`OpenSSL.SSL.Context`
    :param ssl_context: SSL context to use for SSL connections
    :type  kwargs: :class:`dict` of :class:`str` and :class:`object`
    :param kwargs: Additional arguments for the RPC provider

    :rtype:  :class:`vmware.vapi.protocol.client.connector.Connector`
    :return: Connection to the vAPI provider
    """
    ...

def get_requests_connector(
    session,
    msg_protocol=...,
    url=...,
    timeout=...,
    pool_size=...,
    provider_filter_chain=...,
):  # -> Any | None:
    """
    Create a connection that uses 'requests' library for http(s) connections to
    a vAPI Provider.

    :type  session: :class:`requests.Session`
    :param session: Session object
    :type  msg_protocol: :class:`str`
    :param msg_protocol: Message protocol to be used for the connection. Valid
        values are 'json'.
    :type  url: :class:`str`
    :param url: HTTP(S) URL to be used
    :type  timeout: :class:`int`
    :param timeout: Request timeout
    :type  pool_size: :class:`int`
    :param pool_size: Connection pool size to be used
    :type  provider_filter_chain: :class:`list` of
        :class:`vmware.vapi.provider.filter.ApiProviderFilter`
    :param provider_filter_chain: List of API filters in order they are to be
        chained
    :rtype: :class:`vmware.vapi.protocol.client.connector.Connector`
    :return: Connection to the vAPI provider
    """
    ...

def get_requests_hok_connector(
    session, msg_protocol=..., url=..., timeout=..., pool_size=...
):  # -> Any | None:
    """
    Create a connection that uses SAML Hok based authentication using 'requests'
    library to connect to a vAPI Provider.

    :type  session: :class:`requests.Session`
    :param session: Session object
    :type  msg_protocol: :class:`str`
    :param msg_protocol: Message protocol to be used for the connection. Valid
        values are 'json'.
    :type  url: :class:`str`
    :param url: HTTP(S) URL to be used
    :type  timeout: :class:`int`
    :param timeout: Request timeout
    :type  pool_size: :class:`int`
    :param pool_size: Connection pool size to be used
    :rtype: :class:`vmware.vapi.protocol.client.connector.Connector`
    :return: Connection to the vAPI provider
    """
    ...
