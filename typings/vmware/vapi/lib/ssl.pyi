"""
This type stub file was generated by pyright.
"""

"""
SSL Context factories
"""
__author__ = ...
__copyright__ = ...
logger = ...

class ClientContextFactory:
    """
    Context factory base class. This class should be used to set the
    SSL options
    """

    def get_context(self):
        """
        Returns the SSL context
        """
        ...

class DefaultClientContextFactory(ClientContextFactory):
    """
    Default SSL context class. This chooses some default options for SSL context.
    Clients can retrieve the context.

    To modify the context and set some options directly. Create a class like below
    and set the options. Pass this to the get_connector function

    class CustomClientContextFactory(DefaultClientContextFactory):
        def get_context(self):
            ctx = DefaultClientContextFactory.get_context(self)
            # modify ctx
            return ctx
    """

    def __init__(
        self, certificate=..., private_key=..., ca_certs=..., ca_certs_dir=...
    ) -> None:
        """
        Initialize DefaultClientContextFactory

        :type  certificate: :class:`str`
        :param certificate: File path of the certificate
        :type  private_key: :class:`str`
        :param private_key: File path of the private key
        :type  ca_certs: :class:`str`
        :param ca_certs: File path of ca certificates
        :type  ca_certs_dir: :class:`str`
        :param ca_certs_dir: Directory prepared using the c_rehash tool
            included with OpenSSL
        """
        ...

    def get_context(self):  # -> Context:
        """
        Returns the SSL context

        :rtype: :class:`OpenSSL.SSL.Context`
        :return: SSL context
        """
        ...

class UnverifiedClientContextFactory(DefaultClientContextFactory):
    """
    Unverified SSL context class. This class retrieves an unverified SSL Context
    with other options from the DefaultClientContext
    """

    def __init__(self) -> None: ...
