"""
This type stub file was generated by pyright.
"""

import abc
import six
from vmware.vapi.provider.filter import ApiProviderFilter

"""
SecurityContext API Provider filter
"""
__author__ = ...
__copyright__ = ...
logger = ...

@six.add_metaclass(abc.ABCMeta)
class SecurityContextFilter(ApiProviderFilter):
    """
    SecurityContextFilter in API Provider chain adds the security
    context to the execution context passed in.
    """

    def __init__(self, next_provider=...) -> None:
        """
        Initialize SecurityContextFilter

        :type  next_provider: :class:`vmware.vapi.core.ApiProvider`
        :param next_provider: API Provider to invoke the requests
        """
        ...

    @abc.abstractmethod
    def get_max_retries(self):  # -> None:
        """
        Get the max number of retries

        :rtype: :class:`int`
        :return: Number of retries
        """
        ...

    @abc.abstractmethod
    def get_security_context(self, on_error):  # -> None:
        """
        Retrieve security context. If this method is called after an error
        occured and the request needs to be retried, then a new security context
        may be created depending on the scheme.

        :type  on_error: :class:`bool`
        :param on_error: Whether this method is called after getting an error
        :rtype: :class:`vmware.vapi.core.SecurityContext`
        :return: Security context
        """
        ...

    @abc.abstractmethod
    def should_retry(self, error_value):  # -> None:
        """
        Returns whether the request should be retried or not based on the error.

        :type  error_value: :class:`vmware.vapi.data.value.ErrorValue`
        :param error_value: Method error
        :rtype: :class:`bool`
        :return: Returns True if request should be retried based on the error
            value provided else False
        """
        ...

    def invoke(
        self, service_id, operation_id, input_value, ctx
    ):  # -> MethodResult | None:
        """
        Invoke an API request

        :type  service_id: :class:`str`
        :param service_id: Service identifier
        :type  operation_id: :class:`str`
        :param operation_id: Operation identifier
        :type  input_value: :class:`vmware.vapi.data.value.StructValue`
        :param input_value: Method input parameters
        :type  ctx: :class:`vmware.vapi.core.ExecutionContext`
        :param ctx: Execution context for this method

        :rtype: :class:`vmware.vapi.core.MethodResult`
        :return: Result of the method invocation
        """
        ...

class LegacySecurityContextFilter(SecurityContextFilter):
    """
    SecurityContextFilter in API Provider chain adds the security
    context to the execution context passed in.
    """

    def __init__(self, next_provider=..., security_context=...) -> None:
        """
        Initialize SecurityContextFilter

        :type  next_provider: :class:`vmware.vapi.core.ApiProvider`
        :param next_provider: API Provider to invoke the requests
        :type  security_context: :class:`vmware.vapi.core.SecurityContext`
        :param security_context: Security context
        """
        ...

    def get_max_retries(self):  # -> Literal[0]:
        """
        Get the max number of retries

        :rtype: :class:`int`
        :return: Number of retries
        """
        ...

    def set_security_context(self, security_context):  # -> None:
        """
        Set security context

        :type  security_context: :class:`vmware.vapi.core.SecurityContext`
        :param security_context: Security context
        """
        ...

    def get_security_context(self, on_error):  # -> None:
        """
        Retrieve the stored security context.

        :type  on_error: :class:`bool`
        :param on_error: Whether this method is called after getting an error
        :rtype: :class:`vmware.vapi.core.SecurityContext` or ``None``
        :return: Security context or None
        """
        ...

    def should_retry(self, error_value):  # -> Literal[False]:
        """
        Returns whether the request should be retried or not based on the error.

        :type  error_value: :class:`vmware.vapi.data.value.ErrorValue`
        :param error_value: Method error
        :rtype: :class:`bool`
        :return: Returns True if request should be retried based on the error
            value provided else False
        """
        ...
