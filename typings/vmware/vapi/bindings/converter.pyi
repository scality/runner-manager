"""
This type stub file was generated by pyright.
"""

from vmware.vapi.bindings.type import BindingTypeVisitor

"""
Type converter to/from vAPI runtime data model to Python native data model
"""
__author__ = ...
__copyright__ = ...
logger = ...

class RestConverter:
    """
    Constants for different REST converter modes
    """

    VAPI_REST = ...
    SWAGGER_REST = ...

class PythonToVapiJsonRpcDataValueVisitor(BindingTypeVisitor):
    """
    Visitor to convert from Python native value to vAPI JSON-RPC compatible
    DataValue
    """

    def __init__(self, value) -> None:
        """
        Initialize PythonToVapiJsonRpcDataValueVisitor

        :type  value: :class:`object`
        :param value: Native python value
        """
        ...

    def get_out_value(self):  # -> DataValue | StructValue | None:
        """
        Returns the vAPI DataValue converted from the Python native value

        :rtype: :class:`vmware.vapi.data.value.DataValue`
        :return: vAPI DataValue
        """
        ...

    def visit_primitive(self, typ):  # -> None:
        """
        Visit a primitive type python value

        :type  typ: :class:`vmware.vapi.bindings.type.BindingType`
        :param typ: Binding type of the value
        """
        ...

    def visit_void(self, typ):  # -> None:
        """
        Visit a void value (i.e. None)

        :type  typ: :class:`vmware.vapi.bindings.type.VoidType`
        :param typ: Binding type of the value
        """
        ...

    def visit_integer(self, typ):  # -> None:
        """
        Visit an integer value

        :type  typ: :class:`vmware.vapi.bindings.type.IntegerType`
        :param typ: Binding type of the value
        """
        ...

    def visit_double(self, typ):  # -> None:
        """
        Visit an double value

        :type  typ: :class:`vmware.vapi.bindings.type.DoubleType`
        :param typ: Binding type of the value
        """
        ...

    def visit_string(self, typ):  # -> None:
        """
        Visit an string value

        :type  typ: :class:`vmware.vapi.bindings.type.StringType`
        :param typ: Binding type of the value
        """
        ...

    def visit_secret(self, typ):  # -> None:
        """
        Visit an secret value

        :type  typ: :class:`vmware.vapi.bindings.type.SecretType`
        :param typ: Binding type of the value
        """
        ...

    def visit_boolean(self, typ):  # -> None:
        """
        Visit an boolean value

        :type  typ: :class:`vmware.vapi.bindings.type.BooleanType`
        :param typ: Binding type of the value
        """
        ...

    def visit_id(self, typ):  # -> None:
        """
        Visit an id value

        :type  typ: :class:`vmware.vapi.bindings.type.IdType`
        :param typ: Binding type of the value
        """
        ...

    def visit_blob(self, typ):  # -> None:
        """
        Visit an blob value

        :type  typ: :class:`vmware.vapi.bindings.type.BlobType`
        :param typ: Binding type of the value
        """
        ...

    def visit_opaque(self, typ):  # -> None:
        """
        Visit an opaque value. Don't do any conversion.

        :type  typ: :class:`vmware.vapi.bindings.type.OpaqueType`
        :param typ: Binding type of the value
        """
        ...

    def visit_list(self, typ):  # -> None:
        """
        Visit a list value

        :type  typ: :class:`vmware.vapi.bindings.type.ListType`
        :param typ: Binding type of the value
        """
        ...

    def visit_set(self, typ):  # -> None:
        """
        Visit a python set

        :type  typ: :class:`vmware.vapi.bindings.type.SetType`
        :param typ: Binding type of the value
        """
        ...

    def visit_map(self, typ):  # -> None:
        """
        Visit a python dict

        :type  typ: :class:`vmware.vapi.bindings.type.MapType`
        :param typ: Binding type of the value
        """
        ...

    def visit_struct(self, typ):  # -> None:
        """
        Visit a struct value

        :type  typ: :class:`vmware.vapi.bindings.type.StructType`
        :param typ: Binding type of the value
        """
        ...

    def visit_error(self, typ):  # -> None:
        """
        Visit an error value

        :type  typ: :class:`vmware.vapi.bindings.type.ErrorType`
        :param typ: Binding type of the value
        """
        ...

    def visit_dynamic_struct(self, typ):  # -> None:
        """
        Visit any struct value

        :type  typ: :class:`vmware.vapi.bindings.type.DynamicStructType`
        :param typ: Binding type of the value
        """
        ...

    def visit_any_error(self, typ):  # -> None:
        """
        Visit any error value

        :type  typ: :class:`vmware.vapi.bindings.type.AnyErrorType`
        :param typ: Binding type of the value
        """
        ...

    def visit_optional(self, typ):  # -> None:
        """
        Visit an optional value

        :type  typ: :class:`vmware.vapi.bindings.type.OptionalType`
        :param typ: Binding type of the value
        """
        ...

    def visit_date_time(self, typ):  # -> None:
        """
        Visit a datetime value

        :type  typ: :class:`vmware.vapi.bindings.type.DateTimeType`
        :param typ: Binding type of the value
        """
        ...

    def visit_uri(self, typ):  # -> None:
        """
        Visit an URI value

        :type  typ: :class:`vmware.vapi.bindings.type.UriType`
        :param typ: Binding type of the value
        """
        ...

    def visit_reference(self, typ):  # -> None:
        """
        Visit a reference type

        :type  typ: :class:`vmware.vapi.bindings.type.ReferenceType`
        :param typ: Binding type of the value
        """
        ...

    def visit_enum(self, typ):  # -> None:
        """
        Visit a enum type python value

        :type  typ: :class:`vmware.vapi.bindings.type.EnumType`
        :param typ: Binding type of the value
        """
        ...

class VapiJsonRpcDataValueToPythonVisitor(BindingTypeVisitor):
    """
    Visitor to convert from vAPI JSON-RPC compatible DataValue to Python native
    value
    """

    def __init__(self, value, resolver) -> None:
        """
        Initialize VapiJsonRpcDataValueToPythonVisitor

        :type  value: :class:`vmware.vapi.data.value.DataValue`
        :param value: vAPI DataValue to be converted
        :type  resolver: :class:`vmware.vapi.bindings.common.NameToTypeResolver`
            or ``None``
        :param resolver: Type resolver
        """
        ...

    def get_out_value(
        self,
    ):  # -> str | Any | StructValue | list[Any] | set[Any] | VapiStruct | UnresolvedError | datetime | Enum | dict[Any, Any] | None:
        """
        Returns the Python native value converted from the vAPI DataValue

        :rtype: :class:`object`
        :return: Native python value
        """
        ...

    def visit_primitive(self, typ):  # -> None:
        """
        Visit one of the primitive DataValues

        :type  typ: :class:`vmware.vapi.bindings.type.BindingType`
        :param typ: Binding type of the value
        """
        ...

    def visit_void(self, typ):  # -> None:
        """
        Since VoidValue does not have any value, just return None

        :type  typ: :class:`vmware.vapi.bindings.type.VoidType`
        :param typ: Binding type of the value
        """
        ...

    def visit_string(self, typ):  # -> None:
        """
        Visit StringValue

        :type  typ: :class:`vmware.vapi.bindings.type.StringType`
        :param typ: Binding type of the value
        """
        ...

    def visit_integer(self, typ):  # -> None:
        """
        Visit IntegerValue

        :type  typ: :class:`vmware.vapi.bindings.type.IntegerType`
        :param typ: Binding type of the value
        """
        ...

    def visit_id(self, typ):  # -> None:
        """
        Visit IdValue

        :type  typ: :class:`vmware.vapi.bindings.type.IdType`
        :param typ: Binding type of the value
        """
        ...

    def visit_boolean(self, typ):  # -> None:
        """
        Visit BooleanValue

        :type  typ: :class:`vmware.vapi.bindings.type.BooleanType`
        :param typ: Binding type of the value
        """
        ...

    def visit_double(self, typ):  # -> None:
        """
        Visit DoubleValue

        :type  typ: :class:`vmware.vapi.bindings.type.DoubleType`
        :param typ: Binding type of the value
        """
        ...

    def visit_secret(self, typ):  # -> None:
        """
        Visit SecretValue

        :type  typ: :class:`vmware.vapi.bindings.type.SecretType`
        :param typ: Binding type of the value
        """
        ...

    def visit_blob(self, typ):  # -> None:
        """
        Visit BlobValue

        :type  typ: :class:`vmware.vapi.bindings.type.BlobType`
        :param typ: Binding type of the value
        """
        ...

    def visit_opaque(self, typ):  # -> None:
        """
        Since there is no OpaqueValue, don't do any conversion

        :type  typ: :class:`vmware.vapi.bindings.type.OpaqueType`
        :param typ: Binding type of the value
        """
        ...

    def visit_list(self, typ):  # -> None:
        """
        Visit a ListValue

        :type  typ: :class:`vmware.vapi.bindings.type.ListType`
        :param typ: Binding type of the value
        """
        ...

    def visit_set(self, typ):  # -> None:
        """
        Visit a List Value. This ListValue must represent a set
        i.e. there must not be any duplicate elements

        :type  typ: :class:`vmware.vapi.bindings.type.SetType`
        :param typ: Binding type of the value
        """
        ...

    def visit_map(self, typ):  # -> None:
        """
        Visit a List Value. This ListValue must represent a map. Each element
        of the ListValue is a StructValue with two fields, namely 'key' and
        'value'. The 'key' field represents the key of the map and the 'value'
        field represents the value of the map. Also, since this represents a
        map, there should not be duplicate keys.

        :type  typ: :class:`vmware.vapi.bindings.type.MapType`
        :param typ: Binding type of the value
        """
        ...

    def visit_struct(self, typ):  # -> None:
        """
        Visit StructValue

        :type  typ: :class:`vmware.vapi.bindings.type.StructType`
        :param typ: Binding type of the value
        """
        ...

    def visit_dynamic_struct(self, typ):  # -> None:
        """
        Visit StructValue to convert it into the base VapiStruct

        :type  typ: :class:`vmware.vapi.bindings.type.DynamicStructType`
        :param typ: Binding type of the value
        """
        ...

    def visit_any_error(self, typ):  # -> None:
        """
        Visit ErrorValue to convert it into the base VapiError

        :type  typ: :class:`vmware.vapi.bindings.type.AnyErrorType`
        :param typ: Binding type of the value
        """
        ...

    def visit_error(self, typ):  # -> None:
        """
        Visit ErrorValue

        :type  typ: :class:`vmware.vapi.bindings.type.ErrorType`
        :param typ: Binding type of the value
        """
        ...

    def visit_optional(self, typ):  # -> None:
        """
        Visit OptionalValue

        :type  typ: :class:`vmware.vapi.bindings.type.OptionalType`
        :param typ: Binding type of the value
        """
        ...

    def visit_date_time(self, typ):  # -> None:
        """
        Visit a datetime value

        :type  typ: :class:`vmware.vapi.bindings.type.DateTimeType`
        :param typ: Binding type of the value
        """
        ...

    def visit_uri(self, typ):  # -> None:
        """
        Visit an URI value

        :type  typ: :class:`vmware.vapi.bindings.type.UriType`
        :param typ: Binding type of the value
        """
        ...

    def visit_enum(self, typ):  # -> None:
        """
        Visit an Enum value

        :type  typ: :class:`vmware.vapi.bindings.type.EnumType`
        :param typ: Binding type of the value
        """
        ...

    def visit_reference(self, typ):  # -> None:
        """
        Visit a reference type

        :type  typ: :class:`vmware.vapi.bindings.type.ReferenceType`
        :param typ: Binding type of the value
        """
        ...

class PythonToVapiRestDataValueVisitor(PythonToVapiJsonRpcDataValueVisitor):
    """
    Visitor to convert from Python native value to vAPI REST compatible
    DataValue
    """

    def __init__(self, value) -> None:
        """
        Initialize PythonToVapiJsonRpcDataValueVisitor

        :type  value: :class:`object`
        :param value: Native python value
        """
        ...

class VapiRestDataValueToPythonVisitor(VapiJsonRpcDataValueToPythonVisitor):
    """
    Visitor to convert from vAPI REST compatible DataValue to Python native
    value
    """

    def __init__(self, value, resolver) -> None:
        """
        Initialize VapiJsonRpcDataValueToPythonVisitor

        :type  value: :class:`vmware.vapi.data.value.DataValue`
        :param value: vAPI DataValue to be converted
        :type  resolver: :class:`vmware.vapi.bindings.common.NameToTypeResolver`
            or ``None``
        :param resolver: Type resolver
        """
        ...

    def visit_optional(self, typ):  # -> None:
        """
        Visit OptionalValue

        :type  typ: :class:`vmware.vapi.bindings.type.OptionalType`
        :param typ: Binding type of the value
        """
        ...

    def visit_dynamic_struct(self, typ):  # -> None:
        """
        Visit StructValue to convert it into the base VapiStruct

        :type  typ: :class:`vmware.vapi.bindings.type.DynamicStructType`
        :param typ: Binding type of the value
        """
        ...

    def visit_blob(self, typ):  # -> None:
        """
        Visit BlobValue

        :type  typ: :class:`vmware.vapi.bindings.type.BlobType`
        :param typ: Binding type of the value
        """
        ...

class PythonToSwaggerRestDataValueVisitor(PythonToVapiJsonRpcDataValueVisitor):
    """
    Visitor to convert from Python native value to Swagger Rest compatible
    DataValue
    """

    def __init__(self, value) -> None:
        """
        Initialize PythonToVapiJsonRpcDataValueVisitor

        :type  value: :class:`object`
        :param value: Native python value
        """
        ...

    def visit_map(self, typ):  # -> None:
        """
        Visit a python dict

        :type  typ: :class:`vmware.vapi.bindings.type.MapType`
        :param typ: Binding type of the value
        """
        ...

class SwaggerRestDataValueToPythonVisitor(VapiJsonRpcDataValueToPythonVisitor):
    """
    Visitor to convert from Swagger Rest compatible DataValue to Python native
    value
    """

    def __init__(self, value, resolver) -> None:
        """
        Initialize VapiJsonRpcDataValueToPythonVisitor

        :type  value: :class:`vmware.vapi.data.value.DataValue`
        :param value: vAPI DataValue to be converted
        :type  resolver: :class:`vmware.vapi.bindings.common.NameToTypeResolver`
            or ``None``
        :param resolver: Type resolver
        """
        ...

    def visit_optional(self, typ):  # -> None:
        """
        Visit OptionalValue

        :type  typ: :class:`vmware.vapi.bindings.type.OptionalType`
        :param typ: Binding type of the value
        """
        ...

    def visit_map(self, typ):  # -> None:
        """
        Visit a StructValue. This ListValue must represent a map. Each element
        of the ListValue is a StructValue with two fields, namely 'key' and
        'value'. The 'key' field represents the key of the map and the 'value'
        field represents the value of the map. Also, since this represents a
        map, there should not be duplicate keys.

        :type  typ: :class:`vmware.vapi.bindings.type.MapType`
        :param typ: Binding type of the value
        """
        ...

    def visit_dynamic_struct(self, typ):  # -> None:
        """
        Visit StructValue to convert it into the base VapiStruct

        :type  typ: :class:`vmware.vapi.bindings.type.DynamicStructType`
        :param typ: Binding type of the value
        """
        ...

    def visit_blob(self, typ):  # -> None:
        """
        Visit BlobValue

        :type  typ: :class:`vmware.vapi.bindings.type.BlobType`
        :param typ: Binding type of the value
        """
        ...

    def visit_date_time(self, typ):  # -> None:
        """
        Visit a datetime value

        :type  typ: :class:`vmware.vapi.bindings.type.DateTimeType`
        :param typ: Binding type of the value
        """
        ...

class TypeConverter:
    """
    Converter class that converts values from vAPI data model to Python native
    data model
    """

    @staticmethod
    def convert_to_python(
        vapi_val, binding_type, resolver=..., rest_converter_mode=...
    ):  # -> str | Any | StructValue | list[Any] | set[Any] | VapiStruct | UnresolvedError | datetime | Enum | dict[Any, Any] | None:
        """
        Converts vAPI DataValue to Python native value

        :type  vapi_val: :class:`vmware.vapi.data.value.DataValue`
        :param vapi_val: vAPI DataValue to be converted
        :type  binding_type: :class:`vmware.vapi.bindings.type.BindingType`
        :param binding_type: BindingType for the value
        :type  resolver: :class:`vmware.vapi.bindings.common.NameToTypeResolver`
            or ``None``
        :param resolver: Type resolver
        :type  rest_converter_mode: :class:`str` or :class:`None`
        :param rest_converter_mode: Converter mode to be used to be be
            compatible for Vapi Rest. If None or unknown string value, then the
            default Json Rpc converter is used
        :rtype: :class:`object`
        :return: Python native value
        """
        ...

    @staticmethod
    def convert_to_vapi(
        py_val, binding_type, rest_converter_mode=...
    ):  # -> DataValue | StructValue | None:
        """
        Converts Python native value to vAPI DataValue

        :type  py_val: :class:`object`
        :param py_val: Python native value to be converted
        :type  binding_type: :class:`vmware.vapi.bindings.type.BindingType`
        :param binding_type: BindingType for the value
        :type  rest_converter_mode: :class:`str` or :class:`None`
        :param rest_converter_mode: Converter mode to be used to be be
            compatible for Vapi Rest. If None or unknown string value, then the
            default Json Rpc converter is used
        :rtype: :class:`vmware.vapi.data.value.DataValue`
        :return: vAPI DataValue
        """
        ...
