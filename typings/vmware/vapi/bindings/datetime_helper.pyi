"""
This type stub file was generated by pyright.
"""

import datetime
import six

"""
Utility library for converting to/from datetime objects in Python Bindings
"""
__author__ = ...
__copyright__ = ...
logger = ...

class DateTimeConverter:
    """
    Helper class to convert to/from Python datetime strings to
    datetime objects.

    Datetime values are transported as a string values that have to be
    converted to Python datetime object for use in Python bindings. The
    string value is in RFC 3339 format (https://tools.ietf.org/html/rfc3339).

    The grammar for regex is as follows:

    date-time       = full-date "T" full-time
    full-date       = date-fullyear "-" date-month "-" date-mday
    date-fullyear   = 4DIGIT
    date-month      = 2DIGIT  ; 01-12
    date-mday       = 2DIGIT  ; 01-28, 01-29, 01-30, 01-31 based on month/year
    full-time       = partial-time time-offset
    partial-time    = time-hour ":" time-minute ":" time-second
        [time-sub-second]
    time-hour       = 2DIGIT  ; 00-23
    time-minute     = 2DIGIT  ; 00-59
    time-second     = 2DIGIT  ; 00-58, 00-59, 00-60 based on leap second rules
    time-sub-second    = "." time-secfrac
    time-secfrac    = 1*DIGIT
    time-offset     = "Z" / time-numoffset
    time-numoffset  = ("+" / "-") time-hour ":" time-minute
    group(1) = full-date
    group(2) = date-fullyear
    group(3) = date-month
    group(4) = date-mday
    group(5) = full-time
    group(6) = partial-time
    group(7) = time-hour
    group(8) = time-minute
    group(9) = time-second
    group(10) = time-sub-second
    group(11) = time-secfrac
    group(12) = time-offset
    group(13) = time-numoffset
    group(14) = time-hour
    group(15) = time-minute
    """

    _rfc3339_dt_pattern = ...
    _rfc3339_dt_expr = ...
    @staticmethod
    def convert_to_datetime(datetime_str):  # -> datetime:
        """
        Parse RFC 3339 date time from string.

        :type  datetime_str: :class:`str`
        :param datetime_str: Datetime in string representation that is in
                             RFC 3339 format
        :rtype: :class:`datetime.datetime`
        :return: Datetime object
        """
        ...

    @staticmethod
    def convert_from_rfc3339_to_datetime(datetime_str):  # -> datetime:
        """
        Parse RFC 3339 date time from string.

        :type  datetime_str: :class:`str`
        :param datetime_str: Datetime in string representation that is in
            RFC 3339 format
        :rtype: :class:`datetime.datetime`
        :return: Datetime object
        """
        ...

    @staticmethod
    def convert_from_datetime(datetime_obj):
        """
        Convert from Python native datetime object to the datetime format in
        vAPI Runtime i.e. YYYY-MM-DDThh:mm:ss.sssZ.

        datetime objects returned by datetime.now() or datetime.utcnow() does
        not contain any timezone information. The caller to this method should
        only pass datetime objects that have time in UTC timezone.

        datetime objects have microsecond precision but the vAPI datetime
        string format has millisecond precision. The method will truncate the
        microsecond to millisecond and won't do any rounding of the value.

        :type  datetime_obj: :class:`datetime.datetime`
        :param datetime_obj: Datetime object with UTC time
        :rtype: :class:`str`
        :return: String representation of the input datetime object
        """
        ...

utc_tzinfo = ...
if six.PY2:
    class UTC(datetime.tzinfo):
        """
        tzinfo class for UTC timezone
        """

        def utcoffset(self, dt):  # -> timedelta:
            ...

        def tzname(self, dt):  # -> Literal['UTC']:
            ...

        def dst(self, dt):  # -> timedelta:
            ...

    utc_tzinfo = ...
else:
    utc_tzinfo = ...

def convert_to_utc(date_time):  # -> None:
    """
    Convert a given datetime object to UTC timezone
    """
    ...
