"""
This type stub file was generated by pyright.
"""

from vmware.vapi.lib.visitor import VapiVisitor

"""
DataDefinition classes
"""
__author__ = ...
__copyright__ = ...
logger = ...

class DataDefinition:
    """
    Base class for all types in the vAPI run-time type system

    :type type: :class:`str`
    :ivar type: String representation of the type
    """

    def __init__(self, data_type=...) -> None:
        """
        Initialize the data definition instance

        :type  data_type: :class:`str`
        :param data_type: String representation of the type
        """
        ...

    def valid_instance_of(self, value):  # -> bool:
        """
        Validates that the specified :class:`vmware.vapi.data.value.DataValue`
        is an instance of this data-definition

        :type  value: :class:`vmware.vapi.data.value.DataValue`
        :param value: the data value to validate

        :rtype: :class:`bool`
        :return: true if the value is an instance of this data-definition,
                 false, otherwise
        """
        ...

    def validate(self, value):  # -> list[Message] | None:
        """
        Validates that the specified :class:`vmware.vapi.data.value.DataValue`
        is an instance of this data-definition

        :type  value: :class:`vmware.vapi.data.value.DataValue`
        :param value: the data value to validate

        :rtype: :class:`list` of :class:`vmware.vapi.message.Message`
                or ``None``
        :return: a stack of messages indicating why the value is not an instance
                 of this data-definition, or None if the value is an instance of
                 this data-definition
        """
        ...

    def complete_value(self, value):  # -> None:
        """
        Fill the optional fields of StructValues. Also
        includes the StructValues present in other generic types: List
        and Optional.

        :type  value: :class:`vmware.vapi.data.value.DataValue`
        :param value: DataValue
        """
        ...

    def accept(self, visitor):  # -> None:
        """
        Applies a visitor to this data-definition.

        :type  visitor: :class:`SimpleDefinitionVisitor`
        :param visitor: the visitor operating on this data-definition
        """
        ...

    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self):  # -> str:
        ...

class SingletonDefinition(DataDefinition):
    """
    Base class for all the primitive data definition classes. All the derived
    classes of this class will have only one instance.
    """

    _instance = ...
    def __init__(self, data_type) -> None:
        """
        Initialize SingletonDefinition

        :type  data_type: :class:`vmware.vapi.data.type.Type`
        :param data_type: Type of the DataDefinition
        """
        ...

    def __new__(cls, *args, **kwargs):  # -> Self:
        ...

class VoidDefinition(SingletonDefinition):
    """
    DataDefinition class for void
    """

    def __init__(self) -> None:
        """
        Initialize VoidDefinition
        """
        ...

    def new_value(self):
        """
        Create a new VoidValue

        :rtype: :class:`vmware.vapi.data.value.VoidValue`
        :return: Newly created VoidValue
        """
        ...

class IntegerDefinition(SingletonDefinition):
    """
    DataDefinition for long values
    """

    def __init__(self) -> None:
        """
        Initialize IntegerDefinition
        """
        ...

    def new_value(self, value=...):
        """
        Create a new IntegerValue

        :rtype: :class:`vmware.vapi.data.value.IntegerValue`
        :return: Newly created IntegerValue
        """
        ...

class DoubleDefinition(SingletonDefinition):
    """
    DataDefinition for floats
    """

    def __init__(self) -> None:
        """
        Initialize DoubleDefinition
        """
        ...

    def new_value(self, value=...):
        """
        Create a new DoubleValue

        :rtype: :class:`vmware.vapi.data.value.DoubleValue`
        :return: Newly created DoubleValue
        """
        ...

class StringDefinition(SingletonDefinition):
    """
    DataDefinition for strings
    """

    def __init__(self) -> None:
        """
        Initialize StringDefinition
        """
        ...

    def new_value(self, value=...):
        """
        Create a new StringValue

        :rtype: :class:`vmware.vapi.data.value.StringValue`
        :return: Newly created StringValue
        """
        ...

class OpaqueDefinition(SingletonDefinition):
    """
    DataDefinition for opaque
    """

    def __init__(self) -> None:
        """
        Initialize OpaqueDefinition
        """
        ...

    def validate(self, value):  # -> list[Message] | None:
        """
        The validation for OpaqueDefinition will succeed against
        any DataValue. Only validates that supplied value is not None

        :type  value: :class:`vmware.vapi.data.value.DataValue`
        :param value: DataValue to be validated
        :rtype: :class:`list` of :class:`vmware.vapi.message.Message`
                 or ``None``
        :return: a stack of messages indicating why the value is not an instance
                 of this data-definition, or None if the value is an instance of
                 this data-definition
        """
        ...

class DynamicStructDefinition(SingletonDefinition):
    """
    DataDefinition for dynamic structs
    """

    _valid_types = ...
    def __init__(self) -> None:
        """
        Initialize DynamicStructDefinition
        """
        ...

    def validate(self, value):  # -> list[Message] | None:
        """
        The validation for DynamicStructDefinition will succeed against
        any StructValue.

        :type  value: :class:`vmware.vapi.data.value.DataValue`
        :param value: the data value to validate

        :rtype: :class:`list` of :class:`vmware.vapi.message.Message`
                or ``None``
        :return: a stack of messages indicating why the value is not an instance
                 of this data-definition, or None if the value is an instance of
                 this data-definition
        """
        ...

class AnyErrorDefinition(SingletonDefinition):
    """
    DataDefinition for 'Exception' type in IDL
    """

    def __init__(self) -> None:
        """
        Initialize AnyErrorDefinition
        """
        ...

    def validate(self, value):  # -> list[Message] | None:
        """
        The validation for AnyErrorDefinition will succeed against
        any ErrorValue.

        :type  value: :class:`vmware.vapi.data.value.DataValue`
        :param value: the data value to validate

        :rtype: :class:`list` of :class:`vmware.vapi.message.Message`
                or ``None``
        :return: a stack of messages indicating why the value is not an instance
                 of this data-definition, or None if the value is an instance of
                 this data-definition
        """
        ...

class BlobDefinition(SingletonDefinition):
    """
    DataDefinition for binary values
    """

    def __init__(self) -> None:
        """
        Initialize BlobDefinition
        """
        ...

    def new_value(self, value=...):
        """
        Create a new BlobValue

        :rtype: :class:`vmware.vapi.data.value.BlobValue`
        :return: Newly created BlobValue
        """
        ...

class BooleanDefinition(SingletonDefinition):
    """
    DataDefinition for bool values
    """

    def __init__(self) -> None:
        """
        Initialize BooleanDefinition
        """
        ...

    def new_value(self, value=...):
        """
        Create a new BooleanValue

        :rtype: :class:`vmware.vapi.data.value.BooleanValue`
        :return: Newly created BooleanValue
        """
        ...

class ListDefinition(DataDefinition):
    """
    DataDefinition for lists
    """

    def __init__(self, element_type) -> None:
        """
        Initialize ListDefinition

        :type  element_type: :class:`DataDefinition`
        :param element_type: DataDefinition of the elements inside
                ListDefinition
        """
        ...

    def new_value(self, values=...):
        """
        Create a new ListValue

        :type  values: :class:`list` of
                :class:`vmware.vapi.data.value.DataValue`
        :param values: List of elements
        :rtype: :class:`vmware.vapi.data.value.ListValue`
        :return: Newly created ListValue
        """
        ...

    def validate(self, list_value):  # -> list[Message] | None:
        """
        Apart from the validation checks specified in the validate
        method of DataDefinition class, this method does some additional checks

        Validation will fail if any element in the ListValue does not validate
        against the DataDefinition of the elementType of this ListDefinition

        :type  other: :class:`vmware.vapi.data.value.ListValue`
        :param other: ListValue to be validated
        :rtype: :class:`list` of :class:`vmware.vapi.message.Message`
                or ``None``
        :return: a stack of messages indicating why the value is not an instance
                 of this data-definition, or None if the value is an instance of
                 this data-definition
        """
        ...

    def complete_value(self, value):  # -> None:
        """
        Fill the optional values inside StructValues

        :type  value: :class:`vmware.vapi.data.value.DataValue`
        :param value: DataValue
        """
        ...

    def __eq__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self):  # -> str:
        ...

class StructDefinition(DataDefinition):
    """
    DataDefinition for structures
    """

    def __init__(self, name, fields, data_type=...) -> None:
        """
        Initialize StructDefinition

        :type  name: :class:`str`
        :param name: Name of the Structure
        :type  fields: :class:`tuple` of (:class:`str`, :class:`DataDefinition`)
        :param fields: A tuple consisting of the field name and the field
                       definition for all the fields inside this
                       StructDefinition
        """
        ...

    def new_value(self):
        """
        Create a new StructValue

        :rtype: :class:`vmware.vapi.data.value.StructValue`
        :return: Newly created StructValue
        """
        ...

    def get_field_names(self):  # -> list[Any]:
        """
        Returns the list of field names in this struct definition. The ordering
        of fields is not preserved.

        :rtype: :class:`list` of :class:`str`
        :return: List of field names in this struct definition
        """
        ...

    def get_field(self, field):  # -> None:
        """
        Returns the field definition of the specified field

        :rtype: :class:`DataDefinition`
        :return: field definition of the specified field
        """
        ...

    def validate(self, other):  # -> list[Message] | None:
        """
        Apart from the validation checks specified in the validate
        method of DataDefinition class, this method does some additional checks

        Validation will fail if
        - the name of the input StructValue does not match the name of this
        StructDefinition.
        - any of the fields (either required or optional) in this
        StructDefinition are not present in the input StructValue
        - the validation fails for any field value in the input StructValue with
        its corresponding definition in this StructDefinition

        The method performs inclusive validation. i.e. If there are any extra
        fields in the input StructValue which are not present in the
        StructDefinition, validation will not fail.

        :type  other: :class:`vmware.vapi.data.value.StructValue`
        :param other: StructValue to be validated
        :rtype: :class:`list` of :class:`vmware.vapi.message.Message`
                or ``None``
        :return: a stack of messages indicating why the value is not an instance
                 of this data-definition, or None if the value is an instance of
                 this data-definition
        """
        ...

    def complete_value(self, value):  # -> None:
        """
        Fill out all the unset optional fields in a structure
        based on the StructDefinition

        :type  value: :class:`vmware.vapi.data.value.StructValue`
        :param value: Input Struct Value
        """
        ...

    def __eq__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self):  # -> str:
        ...

class StructRefDefinition(DataDefinition):
    """
    Reference to a StructDefinition. If the reference is resolved, it is
    bound to a specific StructDefinition target. If the reference is
    unresolved, its target is None.

    :type name: :class:`str`
    :ivar name: Structure name
    """

    def __init__(self, name, definition=...) -> None:
        """
        Initialize StructRefDefinition

        :type  name: :class:`str`
        :param name: Structure name
        :type  definition: :class:`DataDefinition`
        :param definition: If definition is passed, it creates a resolved
                           reference
        """
        ...

    @property
    def target(self):  # -> None:
        """
        Returns the target structure definition of this reference.

        :rtype: :class:`DataDefinition` or ``None``
        :return: The target of this reference. The value will be None for
                 unresolved reference
        """
        ...

    @target.setter
    def target(self, definition):  # -> None:
        """
        Resolves the reference. An unresolved reference can be resolved exactly
        once. A resolved reference cannot be re-resolved.

        :type  definition: :class:`DataDefinition`
        :param definition: structure definition
        :raise: :class:`vmware.vapi.exception.CoreException`: if the reference
            is already resolved (already has) a target) or if the name of the
            reference does not match the name of the definition
        """
        ...

    def check_resolved(self):  # -> None:
        """
        Check if the reference is resolved or not
        """
        ...

    def complete_value(self, value):  # -> None:
        """
        Fill out all the unset optional fields in a structure
        based on the resolved StructDefinition for this
        StructRefDefinition.

        :type  value: :class:`vmware.vapi.data.value.StructValue`
        :param value: Input StructValue
        """
        ...

    def validate(self, other):  # -> Generator[Any, Any, None]:
        """
        Validate using the target if the reference is resolved

        :type  other: :class:`vmware.vapi.data.value.StructValue`
        :param other: StructValue to be validated
        :rtype: :class:`list` of :class:`vmware.vapi.message.Message` of
                ``None``
        :return: a stack of messages indicating that the reference is not
                 resolved or why the value is not an instance of this
                 data-definition, or None if the value is an instance of
                 this data-definition
        """
        ...

    def __eq__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self):  # -> LiteralString:
        ...

class ErrorDefinition(StructDefinition):
    """
    DataDefinition for errors
    """

    def __init__(self, name, fields) -> None:
        """
        Initialize ErrorDefinition

        :type  name: :class:`str`
        :param name: Name of the Error
        :type  fields: :class:`tuple` of (:class:`str`, :class:`DataDefinition`)
        :param fields: A tuple consisting of the field name and the field
                       definition for all the fields inside this
                       StructDefinition
        """
        ...

    def new_value(self):
        """
        Create a new ErrorValue

        :rtype: :class:`vmware.vapi.data.value.ErrorValue`
        :return: Newly created ErrorValue
        """
        ...

class OptionalDefinition(DataDefinition):
    """
    An OptionalDefinition instance defines an optional type with a specified
    element type

    :type data_type: :class:`str`
    :ivar type: String representation of the type
    :type element_type: :class:`DataDefinition`
    :ivar element_type: The type of the element that is optional
    """

    def __init__(self, element_type) -> None:
        """
        Initialize OptionalDefinition

        :type  element_type: :class:`vmware.vapi.data.type.Type`
        :param element_type: Type of the DataDefinition
        """
        ...

    def new_value(self, value=...):
        """
        Create and return a new :class:`OptionalValue` using this
        optional-definition.

        :type  value: :class:`vmware.vapi.data.value.DataValue`
        :param value: The element value

        :rtype: :class:`vmware.vapi.data.value.OptionalValue`
        :return: A new optional value using the given data-definition
        """
        ...

    def validate(self, value):  # -> list[Message] | None:
        """
        Apart from the validation checks specified in the validate
        method of DataDefinition class, this method does some additional checks.

        Since this is an OptionalValue, validation will succeed if the
        element value is None. If the element value is not None, validation
        will fail if element in the OptionalValue does not validate against
        the DataDefinition of the element_type of this OptionalDefinition.

        :type  other: :class:`vmware.vapi.data.value.OptionalValue`
        :param other: OptionalValue to be validated
        :rtype: :class:`list` of :class:`vmware.vapi.message.Message`
        :return: a stack of messages indicating why the value is not an instance
                 of this data-definition, or None if the value is an instance of
                 this data-definition
        """
        ...

    def complete_value(self, value):  # -> None:
        """
        Fill the optional values inside StructValues

        :type  value: :class:`vmware.vapi.data.value.OptionalValue`
        :param value: DataValue
        """
        ...

    def __eq__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self):  # -> str:
        ...

class SecretDefinition(SingletonDefinition):
    """
    DataDefinition for Secrets. Only strings are allowed to be secrets.
    """

    def __init__(self) -> None:
        """
        Initialize SecretDefinition
        """
        ...

    def new_value(self, value=...):
        """
        Create a new SecretValue

        :rtype: :class:`vmware.vapi.data.value.SecretValue`
        :return: Newly created SecretValue
        """
        ...

class SimpleDefinitionVisitor(VapiVisitor):
    """
    Base no-op implementation of a definition visitor
    """

    def __init__(self) -> None: ...
    def visit_void(self, defn):
        """
        Visit a VoidDefinition

        :type  defn: :class:`VoidDefinition`
        :param defn: Data definition
        """
        ...

    def visit_integer(self, defn):
        """
        Visit a IntegerDefinition

        :type  defn: :class:`IntegerDefinition`
        :param defn: Data definition
        """
        ...

    def visit_double(self, defn):
        """
        Visit a DoubleDefinition

        :type  defn: :class:`DoubleDefinition`
        :param defn: Data definition
        """
        ...

    def visit_string(self, defn):
        """
        Visit a StringDefinition

        :type  defn: :class:`StringDefinition`
        :param defn: Data definition
        """
        ...

    def visit_opaque(self, defn):
        """
        Visit a OpaqueDefinition

        :type  defn: :class:`OpaqueDefinition`
        :param defn: Data definition
        """
        ...

    def visit_blob(self, defn):
        """
        Visit a BlobDefinition

        :type  defn: :class:`BlobDefinition`
        :param defn: Data definition
        """
        ...

    def visit_boolean(self, defn):
        """
        Visit a BooleanDefinition

        :type  defn: :class:`BooleanDefinition`
        :param defn: Data definition
        """
        ...

    def visit_list(self, defn):
        """
        Visit a ListDefinition

        :type  defn: :class:`ListDefinition`
        :param defn: Data definition
        """
        ...

    def visit_struct(self, defn):
        """
        Visit a StructDefinition

        :type  defn: :class:`StructDefinition`
        :param defn: Data definition
        """
        ...

    def visit_error(self, defn):
        """
        Visit an ErrorDefinition

        :type  defn: :class:`ErrorDefinition`
        :param defn: Data definition
        """
        ...

    def visit_optional(self, defn):
        """
        Visit a OptionalDefinition

        :type  defn: :class:`OptionalDefinition`
        :param defn: Data definition
        """
        ...

    def visit_secret(self, defn):
        """
        Visit a SecretDefinition

        :type  defn: :class:`SecretDefinition`
        :param defn: Data definition
        """
        ...

    def visit_struct_ref(self, defn):
        """
        Visit a StructRefDefinition

        :type  defn: :class:`StructRefDefinition`
        :param defn: StructRefDefinition object
        """
        ...

data_type_to_definition_map = ...

def data_definition_factory(data_type, *args, **kwargs):
    """
    data definition factory

    :type  data_type: :class:`str`
    :param data_type: Type name defined in vmware.vapi.data.type
    :type  args: :class:`set`
    :param args: Positional arguments to data definition constructor
    :type  kwargs: :class:`dict`
    :param kwargs: Dict arguments to data definition constructor
    """
    ...

class ReferenceResolver:
    """
    Resolves all the StructRefDefinition objects
    """

    def __init__(self) -> None:
        """
        Initialize ReferenceResolver
        """
        ...

    def add_definition(self, definition):  # -> None:
        """
        Adds a new structure definition to the context

        :type  definition: :class:`StructDefinition`
        :param definition: StructDefinition
        """
        ...

    def add_reference(self, reference):  # -> None:
        """
        Adds a new structure refernce to the context

        :type  refernce: :class:`StructRefDefinition`
        :param refernce: StructRefDefinition
        """
        ...

    def is_defined(self, name):  # -> bool:
        """
        Determines whether the context contains a definition for the specified
        structure

        :rtype: :class:`bool`
        :return: True if the structure is already defined, false otherwise
        """
        ...

    def get_definition(self, name):  # -> None:
        """
        Determines whether the context contains a definition for the specified
        structure

        :rtype: :class:`StructDefinition`
        :return: Definition if the structure if it is already defined,
                 None otherwise
        """
        ...

    def resolve(self):  # -> None:
        """
        Traverses all references and resolves the unresolved ones.
        """
        ...
