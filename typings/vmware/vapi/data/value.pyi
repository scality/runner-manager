"""
This type stub file was generated by pyright.
"""

from vmware.vapi.lib.visitor import VapiVisitor

"""
vAPI DataValues
"""
__author__ = ...
__copyright__ = ...
logger = ...

class DataValue:
    """
    A piece of introspectable value in vAPI infrastructure

    :type type: :class:`vmware.vapi.data.type.Type`
    :ivar type: Type of DataValue
    """

    def __init__(self, data_type=...) -> None:
        """
        Initialize DataValue

        :type  data_type: :class:`vmware.vapi.data.type.Type`
        :param data_type: Type of DataValue
        """
        ...

    def accept(self, visitor):  # -> None:
        """
        Applies a visitor to this DataValue

        :type  visitor: :class:`SimpleValueVisitor`
        :param visitor: visitor operating on this DataValue
        """
        ...

class PrimitiveDataValue(DataValue):
    """
    Base class for all primitive DataValues

    :type value: :class:`object`
    :ivar value: Primitive value
    """

    def __init__(self, *args, **kwargs) -> None: ...
    def __repr__(self):  # -> str:
        ...

class ComparableValueMixin:
    """
    Helper class to implement the rich comparator operations.
    """

    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __hash__(self) -> int: ...

class IntegerValue(PrimitiveDataValue, ComparableValueMixin):
    """
    DataValue class for integer values

    :type value: :class:`int`
    :ivar value: 64 bit signed int present in IntegerValue
    """

    def __init__(self, value=...) -> None:
        """
        Initialize IntegerValue

        :type  value: :class:`int`
        :kwarg value: Integer value to be initialized
        """
        ...

class DoubleValue(PrimitiveDataValue, ComparableValueMixin):
    """
    DataValue class for float values

    :type value: :class:`float` or :class:`decimal.Decimal`
    :ivar value: 64 bit signed float present in DoubleValue
    """

    def __init__(self, value=...) -> None:
        """
        Initialize DoubleValue

        :type  value: :class:`float` or :class:`decimal.Decimal`
        :kwarg value: Float or decimal.Decimal value to be initialized
        """
        ...

class StringValue(PrimitiveDataValue, ComparableValueMixin):
    """
    DataValue class for strings

    :type value: :class:`str`
    :ivar value: String present in StringValue
    """

    def __init__(self, value=...) -> None:
        """
        Initialize StringValue

        :type  value: :class:`str` or :class:`unicode` for Python 2 and
                      :class:`str` for Python 3
        :kwarg value: String value to be initialized
        """
        ...

class BooleanValue(PrimitiveDataValue, ComparableValueMixin):
    """
    DataValue class for bool values

    :type value: :class:`bool`
    :ivar value: Bool present in BooleanValue
    """

    def __init__(self, value=...) -> None:
        """
        Initialize BooleanValue

        :type  value: :class:`bool`
        :kwarg value: Bool value to be initialized
        """
        ...

class BlobValue(PrimitiveDataValue, ComparableValueMixin):
    """
    DataValue class for binary values

    :type value: :class:`str` for Python 2 and :class:`bytes` for Python 3
    :ivar value: Binary present in BlobValue
    """

    def __init__(self, value=...) -> None:
        """
        Initialize BooleanValue

        :type value: :class:`str` for Python 2 and :class:`bytes` for Python 3
        :kwarg value: Binary value to be initialized
        """
        ...

class VoidValue(PrimitiveDataValue):
    """
    DataValue class for None
    """

    def __init__(self) -> None:
        """
        Initialize VoidValue
        """
        ...

    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self):  # -> Literal['VoidValue()']:
        ...

class ListValue(DataValue):
    """
    DataValue class for lists
    """

    def __init__(self, values=..., is_map=...) -> None:
        """
        Initialize ListValue
        """
        ...

    def add(self, value):  # -> None:
        """
        Add an element to ListValue

        :type  value: :class:`DataValue`
        :param value: DataValue to be added
        """
        ...

    def add_all(self, values):  # -> None:
        """
        Add all the elements from input list to ListValue

        :type  values: :class:`list` of :class:`DataValue`
        :param values: List of DataValues to be added
        """
        ...

    def is_empty(self):  # -> bool:
        """
        Returns true if the list is empty

        :rtype: :class:`bool`
        :return: True if the list is empty, false otherwise
        """
        ...

    def size(self):  # -> int:
        """
        Returns the size of the list

        :rtype: :class:`int`
        :return: Size of the list value
        """
        ...

    def is_map(self):  # -> bool:
        """
        Returns true if the list is representing a VMODL2 map type

        :rtype: :class:`bool`
        :return: True if the list is representing a map, false otherwise
        """
        ...

    def set_map(self, is_map):  # -> None:
        """
        Sets if this List Value is used to represent a map
        """
        ...

    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __iter__(self):  # -> Iterator[Any]:
        ...

    def __len__(self):  # -> int:
        ...

    def __repr__(self):  # -> str:
        ...

class OptionalValue(DataValue, ComparableValueMixin):
    """
    DataValue class for optionals

    :type value: :class:`DataValue`
    :ivar value: DataValue present in this OptionalValue
    """

    def __init__(self, value=...) -> None:
        """
        Initialize OptionalValue

        :type  value: :class:`DataValue`
        :kwarg value: DataValue to be used in OptionalValue
        """
        ...

    def is_set(self):  # -> bool:
        """
        Returns true if OptionalValue has a DataValue present in it

        :rtype: :class:`bool`
        :return: Returns true if OptionalValue is initialized with some
                 DataValue, false otherwise
        """
        ...

    def __repr__(self):  # -> str:
        ...

class StructValue(DataValue):
    """
    DataValue class for Structures

    :type name: :class:`str`
    :ivar name: Name of the structure
    """

    def __init__(self, name=..., data_type=..., values=...) -> None:
        """
        Initialize StructValue

        :type  name: :class:`str` or :class:`unicode` for Python 2
        :kwarg name: Name of the StructValue
        :type  data_type: :class:`str`
        :kwarg data_type: Type of StructValue, whether structure or error.
        :type  values: :class:`dict` of :class:`str` and :class:`DataValue` or
                       :class:`dict` of :class:`unicode` and :class:`DataValue`
                       for Python 2 and :class:`dict` of :class:`str` and
                       :class:`DataValue` for Python 3
        :kwarg values: Dict of field names and field values
        """
        ...

    def get_fields(self):  # -> Iterator[tuple[Any, Any]]:
        """
        Returns the map of field names and values present in this
        StructValue.

        :rtype: :class:`dictionary-itemiterator` of :class:`str` and
                :class:`DataValue`
        :return: Fields in this struct value
        """
        ...

    def get_field_names(self):  # -> list[Any]:
        """
        Returns the list of field names present in this StructValue.
        The ordering of fields is not preserved.

        :rtype: :class:`list` of :class:`str`
        :return: List of field names present in this StructValue
        """
        ...

    def has_field(self, field):  # -> bool:
        """
        Returns true if the field is present in the StructValue, false otherwise

        :type  field: :class:`str`
        :param field: Name of the field
        :rtype: :class:`bool`
        :return: Returns true if the field is present in the StructValue,
                 false otherwise
        """
        ...

    def get_field(self, field):
        """
        Returns the field value of the field present in the StructValue

        :type  field: :class:`str`
        :param field: Name of the field
        :rtype: :class:`DataValue`
        :return: Returns the field value of the field present in the StructValue
        """
        ...

    def set_field(self, field, value):  # -> None:
        """
        Set the field value for the field name passed in the argument

        :type  field: :class:`str`
        :param field: Name of the field
        :type  field: :class:`str`
        :param field: Name of the field to be set
        :type  value: :class:`DataValue`
        :param value: DataValue to be used for the field
        """
        ...

    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self):  # -> str:
        ...

    def keys(self):  # -> Iterator[Any]:
        """
        Returns the list of field names

        :rtype: :class:`list` or :class:`str`
        :return: List of field names
        """
        ...

class ErrorValue(StructValue):
    """
    DataValue class for Errors
    """

    def __init__(self, name=..., values=...) -> None:
        """
        Initialize ErrorValue

        :type  name: :class:`str`
        :kwarg name: Name of the ErrorValue
        """
        ...

    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...

class SecretValue(PrimitiveDataValue, ComparableValueMixin):
    """
    DataValue class for secret values. Only strings are allowed to be
    secrets.

    :type value: :class:`str`
    :ivar value: String present in SecretValue
    """

    def __init__(self, value=...) -> None:
        """
        Initialize StringValue

        :type  value: :class:`str`
        :kwarg value: String value to be initialized
        """
        ...

    def __repr__(self):  # -> Literal['SecretValue(<secret>)']:
        ...

    def __str__(self) -> str: ...

class SimpleValueVisitor(VapiVisitor):
    """
    Base no-op implementation of a DataValue visitor
    """

    def __init__(self) -> None:
        """
        Initialize SimpleValueVisitor
        """
        ...

    def visit_void(self, value):  # -> None:
        """
        Visit a VoidValue

        :type  value: :class:`VoidValue`
        :param value: Data value
        """
        ...

    def visit_integer(self, value):  # -> None:
        """
        Visit a IntegerValue

        :type  value: :class:`IntegerValue`
        :param value: Data value
        """
        ...

    def visit_double(self, value):  # -> None:
        """
        Visit a DoubleValue

        :type  value: :class:`DoubleValue`
        :param value: Data value
        """
        ...

    def visit_string(self, value):  # -> None:
        """
        Visit a StringValue

        :type  value: :class:`StringValue`
        :param value: Data value
        """
        ...

    def visit_boolean(self, value):  # -> None:
        """
        Visit a BooleanValue

        :type  value: :class:`BooleanValue`
        :param value: Data value
        """
        ...

    def visit_blob(self, value):  # -> None:
        """
        Visit a BlobValue

        :type  value: :class:`BlobValue`
        :param value: Data value
        """
        ...

    def visit_list(self, value):  # -> None:
        """
        Visit a ListValue

        :type  value: :class:`ListValue`
        :param value: Data value
        """
        ...

    def visit_optional(self, value):  # -> None:
        """
        Visit a OptionalValue

        :type  value: :class:`OptionalValue`
        :param value: Data value
        """
        ...

    def visit_struct(self, value):  # -> None:
        """
        Visit a StructValue

        :type  value: :class:`StructValue`
        :param value: Data value
        """
        ...

    def visit_error(self, value):  # -> None:
        """
        Visit an ErrorValue

        :type  value: :class:`ErrorValue`
        :param value: Data value
        """
        ...

    def visit_secret(self, value):  # -> None:
        """
        Visit a SecretValue

        :type  value: :class:`SecretValue`
        :param value: Data value
        """
        ...

type_map = ...

def data_value_factory(data_type, *args):
    """
    Convenience method to create datavalues

    :type  data_type: :class:`str`
    :param data_type: String representation of the data value type
    :param args: The argument list to be passed to the data value constructor
    """
    ...
