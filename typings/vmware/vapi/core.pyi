"""
This type stub file was generated by pyright.
"""

import abc
import six

"""
Core Protocol Definition classes
"""
__author__ = ...
__copyright__ = ...

@six.add_metaclass(abc.ABCMeta)
class ApiProvider:
    """
    The ApiProvider interface is used for invocation of operations
    """

    @abc.abstractmethod
    def invoke(self, service_id, operation_id, input_value, ctx):  # -> None:
        """
        Invokes the specified method using the input value and the
        the execution context provided

        :type  service_id: :class:`str`
        :param service_id: Service identifier
        :type  operation_id: :class:`str`
        :param operation_id: Operation identifier
        :type  input_value: :class:`vmware.vapi.data.value.StructValue`
        :param input_value: Input parameters for the method
        :type  ctx: :class:`ExecutionContext`
        :param ctx: Execution context for the method

        :rtype: :class:`MethodResult`
        :return: Result of the method invocation
        """
        ...

    def __hash__(self) -> int: ...

class ApiInterface:
    """
    The ApiInterface interface provides introspection APIs for a
    vAPI interface; it is implemented by API providers.
    """

    def __init__(self) -> None:
        """
        Initialize the Api Interface instance
        """
        ...

    def get_identifier(self):
        """
        Returns interface identifier

        :rtype: :class:`InterfaceIdentifier`
        :return: Interface identifier
        """
        ...

    def get_definition(self):
        """
        Returns interface definition

        :rtype: :class:`InterfaceDefinition`
        :return: Interface definition
        """
        ...

    def get_method_definition(self, method_id):
        """
        Returns the method definition

        :rtype: :class:`MethodDefinition`
        :return: Method definition
        """
        ...

    def invoke(self, ctx, method_id, input_value):
        """
        Invokes the specified method using the execution context and
        the input provided

        :type  ctx: :class:`ExecutionContext`
        :param ctx: Execution context for this method
        :type  method_id: :class:`MethodIdentifier`
        :param method_id: Method identifier
        :type  input_value: :class:`vmware.vapi.data.value.StructValue`
        :param input_value: Method input parameters

        :rtype: :class:`MethodResult`
        :return: Result of the method invocation
        """
        ...

    def __hash__(self) -> int: ...

class InterfaceIdentifier:
    """
    InterfaceIdentifier has the information required to uniquely
    address a vAPI interface
    """

    def __init__(self, iface) -> None:
        """
        Initialize an InterfaceIdentifier

        :type  iface: :class:`str`
        :param iface: String identifier of the interface
        """
        ...

    def get_name(self):  # -> str:
        """
        Returns the string identifier of the interface

        :rtype: :class:`str`
        :return: String identifier of the interface
        """
        ...

    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self):  # -> str:
        ...

    def __hash__(self) -> int: ...

class MethodIdentifier:
    """
    This class identifies a :class:`ApiMethod` instance
    """

    def __init__(self, iface, method) -> None:
        """
        Initialize the MethodIdentifier

        :type  iface: :class:`InterfaceIdentifier`
        :param iface: InterfaceIdentifier of this method
        :type  method: :class:`str`
        :param method: String identifier of this method
        """
        ...

    def get_interface_identifier(self):  # -> InterfaceIdentifier:
        """
        Returns the interface identifier of the method

        :rtype: :class:`InterfaceIdentifier`
        :return: InterfaceIdentifier of this method
        """
        ...

    def get_name(self):  # -> str:
        """
        Returns the string identifier of the method

        :rtype: :class:`str`
        :return: String identifier of the method
        """
        ...

    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self):  # -> str:
        ...

    def __hash__(self) -> int: ...

class ProviderDefinition:
    """
    The ProviderDefinition class contains details information about a
    vAPI provider
    """

    def __init__(self, name) -> None:
        """
        Initialize the ProviderDefinition

        :type  name: :class:`str`
        :param name: Name of the provider
        """
        ...

    def get_identifier(self):  # -> Any:
        """
        Returns the provider identifier.

        :rtype: :class:`str`
        :return: Provider identifier
        """
        ...

    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self):  # -> str:
        ...

    def __hash__(self) -> int: ...

class InterfaceDefinition:
    """
    The InterfaceDefinition class contains detailed information about a
    vAPI interface. This should contain all the information required
    to address an interface in the vAPI runtime.
    """

    def __init__(self, id_, method_ids) -> None:
        """
        Initialize the InterfaceDefinition

        :type  id_: :class:`InterfaceIdentifier`
        :param id_: InterfaceIdentifier of this interface
        :type  method_ids: :class:`list` of :class:`MethodIdentifier`
        :param method_ids: List of method identifiers of the methods exposed by
                           this interface
        """
        ...

    def get_identifier(self):  # -> Any:
        """
        Returns the interface identifier

        :rtype: :class:`InterfaceIdentifier`
        :return: Returns the interface identifer of this interface
        """
        ...

    def get_method_identifiers(self):  # -> Any:
        """
        Returns the list of method identifiers of the methods exposed by this
        interface. Each method identifier is unique within an interface. The
        method identifiers returned are unordered

        :rtype: :class:`list` of :class:`MethodIdentifier`
        :return: List of method identifiers of the methods exposed by this
                 interface
        """
        ...

    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self):  # -> str:
        ...

class MethodDefinition:
    """
    This class contains detailed information about a vAPI method. This should
    contain all the information required to address a method in the vAPI
    runtime.
    """

    def __init__(self, id_, input_, output, errors) -> None:
        """
        Initialize MethodDefinition

        :type  id_: :class:`MethodIdentifier`
        :param id_: MethodIdentifier of this method
        :type  input_: :class:`vmware.vapi.data.definition.StructDefinition`
        :param input_: Struct definition corresponding to the method's input
            parameters
        :type  output: :class:`vmware.vapi.data.definition.DataDefinition`
        :param output: Data definition of the method's output
        :type  errors: iterable of
            :class:`vmware.vapi.data.definition.ErrorDefinition`
        :param errors: Error definitions describing the errors that this method
                       can report
        """
        ...

    def get_identifier(self):  # -> Any:
        """
        Returns the method identifier

        :rtype: :class:`MethodIdentifier`
        :return: MethodIdentifier of this method
        """
        ...

    def get_input_definition(self):  # -> Any:
        """
        Returns the struct definition corresponding to the method's input
        parameters. The field names in the struct definition are the parameter
        names and the field values correspond to the data definition of the
        respective fields.

        :rtype: :class:`vmware.vapi.data.definition.StructDefinition`
        :return: StructDefinition correspoding to the method's input
        """
        ...

    def get_output_definition(self):  # -> Any:
        """
        Returns the data definition of the method's output

        :rtype: :class:`vmware.vapi.data.definition.DataDefinition`
        :return: Data definition of the method's output
        """
        ...

    def get_error_definitions(self):  # -> frozenset[Any]:
        """
        Returns a set of error definitions describing the errors that this
        method can report

        :rtype: :class:`set` of
            :class:`vmware.vapi.data.definition.ErrorDefinition`
        :return: Set of error definitions describing the errors that this
            method can report
        """
        ...

    def get_error_definition(self, error_name):  # -> None:
        """
        Returns the error definition with the specified name reported by this
        method or None if this method doesn't report an error with the specified
        name.

        :type  error_name: :class:`str`
        :param error_name: Name of the error definition to return
        :rtype: :class:`vmware.vapi.data.definition.ErrorDefinition`
        :return: Error definition with the specified name reported by this
                 method or None if this method doesn't report an error with the
                 specified name.
        """
        ...

    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self):  # -> str:
        ...

class MethodResult:
    """
    The MethodResult class contains the result of a method call.
    It contains either the output of the method invocation or
    an error reported by the method invocation. These are mutually
    exclusive.

    :type output: :class:`vmware.vapi.data.value.DataValue`
    :ivar output: Method output
    :type error: :class:`vmware.vapi.data.value.ErrorValue`
    :ivar error: Method error
    """

    def __init__(self, output=..., error=...) -> None:
        """
        Initialize MethodResult

        :type  output: :class:`vmware.vapi.data.value.DataValue`
        :param output: Method output
        :type  error: :class:`vmware.vapi.data.value.ErrorValue`
        :param error: Method error
        """
        ...

    @property
    def output(self):  # -> None:
        """
        :rtype: :class:`vmware.vapi.data.value.DataValue`
        :return: Method output
        """
        ...

    @property
    def error(self):  # -> None:
        """
        :rtype: :class:`vmware.vapi.data.value.ErrorValue`
        :return: Method error
        """
        ...

    def success(self):  # -> bool:
        """
        Check if the method completed successfully.

        :rtype: :class:`bool`
        :return: False if the method reported an error, True otherwise
        """
        ...

    def __hash__(self) -> int: ...
    def __repr__(self):  # -> str:
        ...

class CustomDict(dict):
    """
    Interface for implementing Custom dict classes with additional constraints.

    Overriding __setitem__ as not enough for adding additional constraints on
    key/value pairs of dictionaries. We also have to override update and
    setdefault, so that even they use __setitem__.
    """

    def update(self, *args, **kwargs):  # -> None:
        ...

    def setdefault(self, key, val=...):  # -> None:
        ...

class ApplicationContext(CustomDict):
    """
    Interface representing additional data associated with the request for
    method execution represented by this ExecutionContext.
    The additional data format is key-value pairs of String.

    This additional data is provided by the client initiating the
    execution, it is then transported as is over the wire and is
    available for the provider-side service implementations on the server.
    This extra data is completely opaque for the infrastructure, in other
    words it is a contract between the client and the service implementation
    only.
    """

    def __init__(self, *args, **kwargs) -> None: ...
    def __setitem__(self, key, value):  # -> None:
        ...

    def __repr__(self):  # -> str:
        ...

class SecurityContext(CustomDict):
    """
    Implementations of this interface will provide all needed data for
    authentication for the given invocation.
    """

    def __init__(self, *args, **kwargs) -> None: ...
    def __setitem__(self, key, value):  # -> None:
        ...

    def __repr__(self):  # -> Literal['SecurityContext(<hidden>)']:
        ...

    def __str__(self) -> str: ...

class RuntimeData(CustomDict):
    """
    Implementations of this interface will provide custom runtime data.
    """

    def __init__(self, *args, **kwargs) -> None: ...
    def __setitem__(self, key, value):  # -> None:
        ...

    def __repr__(self):  # -> Literal['RuntimeData(<hidden>)']:
        ...

    def __str__(self) -> str: ...

class ExecutionContext:
    """
    This class provides out-of-band context information that is passed along
    with a method invocation
    """

    def __init__(
        self, application_context=..., security_context=..., runtime_data=...
    ) -> None:
        """
        Initialize Execution Context
        """
        ...

    def __hash__(self) -> int: ...
    def __repr__(self):  # -> str:
        ...
